#ifndef __FREERTOS_CONFIG_CONF_H
#define __FREERTOS_CONFIG_CONF_H

/* Ensure stdint is only used by the compiler, and not the assembler. */
#if defined(__ICCARM__) || defined(__CC_ARM) || defined(__GNUC__)
 #include <stdint.h>
 extern uint32_t SystemCoreClock;
#endif

#cmakedefine configUSE_PREEMPTION               @configUSE_PREEMPTION@ 
#cmakedefine configSUPPORT_STATIC_ALLOCATION    @configSUPPORT_STATIC_ALLOCATION@
#cmakedefine configSUPPORT_DYNAMIC_ALLOCATION   @configSUPPORT_DYNAMIC_ALLOCATION@

#cmakedefine configUSE_IDLE_HOOK                @configUSE_IDLE_HOOK@
#cmakedefine configUSE_TICK_HOOK                @configUSE_TICK_HOOK@
#cmakedefine configUSE_MALLOC_FAILED_HOOK       @configUSE_MALLOC_FAILED_HOOK@
#cmakedefine configUSE_DAEMON_TASK_STARTUP_HOOK @configUSE_DAEMON_TASK_STARTUP_HOOK@

#cmakedefine configCPU_CLOCK_HZ                      ( SystemCoreClock )
#cmakedefine configTICK_RATE_HZ                      ((TickType_t)1000)
#cmakedefine configMAX_PRIORITIES                    (@configMAX_PRIORITIES@)
#cmakedefine configMINIMAL_STACK_SIZE                ((uint16_t)@configMINIMAL_STACK_SIZE@)
#cmakedefine configTOTAL_HEAP_SIZE                   ((size_t)(@configTOTAL_HEAP_SIZE@))

#cmakedefine configUSE_16_BIT_TICKS                  @configUSE_16_BIT_TICKS@
#cmakedefine configUSE_MUTEXES                       @configUSE_MUTEXES@
#cmakedefine configUSE_COUNTING_SEMAPHORES           @configUSE_COUNTING_SEMAPHORES@
#cmakedefine configUSE_PORT_OPTIMISED_TASK_SELECTION @configUSE_PORT_OPTIMISED_TASK_SELECTION@
#cmakedefine configUSE_TICKLESS_IDLE                 @configUSE_TICKLESS_IDLE@
#cmakedefine configUSE_TASK_FPU_SUPPORT              @configUSE_TASK_FPU_SUPPORT@
#cmakedefine configUSE_TASK_NOTIFICATIONS            @configUSE_TASK_NOTIFICATIONS@

#cmakedefine configENABLE_BACKWARD_COMPATIBILITY     @configENABLE_BACKWARD_COMPATIBILITY@

/* Co-routine definitions. */
#cmakedefine configUSE_CO_ROUTINES           @configUSE_CO_ROUTINES@
#cmakedefine configMAX_CO_ROUTINE_PRIORITIES (@configMAX_CO_ROUTINE_PRIORITIES@)

/* Software timer definitions. */
#cmakedefine configUSE_TIMERS          @configUSE_TIMERS@
#cmakedefine configTIMER_TASK_PRIORITY (@configTIMER_TASK_PRIORITY@)
#cmakedefine configTIMER_QUEUE_LENGTH  @configTIMER_QUEUE_LENGTH@
#define configTIMER_TASK_STACK_DEPTH (configMINIMAL_STACK_SIZE * 2)

/******************************************************************************/
/* Stack overflow detection method. */
#cmakedefine configCHECK_FOR_STACK_OVERFLOW @configCHECK_FOR_STACK_OVERFLOW@

/******************************************************************************/
/* Run time and task stats gathering related definitions. */
#cmakedefine configUSE_TRACE_FACILITY        @configUSE_TRACE_FACILITY@
#cmakedefine configMAX_TASK_NAME_LEN         (@configMAX_TASK_NAME_LEN@)
#cmakedefine configQUEUE_REGISTRY_SIZE       @configQUEUE_REGISTRY_SIZE@
#cmakedefine configRECORD_STACK_HIGH_ADDRESS @configRECORD_STACK_HIGH_ADDRESS@

// #cmakedefine configGENERATE_RUN_TIME_STATS @configGENERATE_RUN_TIME_STATS@
//   portCONFIGURE_TIMER_FOR_RUN_TIME_STATS
//   portGET_RUN_TIME_COUNTER_VALUE
//   portALT_GET_RUN_TIME_COUNTER_VALUE

#cmakedefine configINCLUDE_FREERTOS_TASK_C_ADDITIONS_H @configINCLUDE_FREERTOS_TASK_C_ADDITIONS_H@
//#define traceTASK_SUSPEND( pxTCB ) printf("S: %s\r\n", pxTCB->pcTaskName);
//#define traceTASK_NOTIFY

/******************************************************************************/
/* RTOS scheduler will always run the highest priority task that is in the Ready 
state, and will switch between tasks of equal priority on every RTOS tick 
interrupt. */
#cmakedefine configUSE_TIME_SLICING @configUSE_TIME_SLICING@

/******************************************************************************/
/* Set the following definitions to 1 to include the API function, or zero
to exclude the API function. */
#cmakedefine INCLUDE_vTaskPrioritySet       @INCLUDE_vTaskPrioritySet@
#cmakedefine INCLUDE_uxTaskPriorityGet      @INCLUDE_uxTaskPriorityGet@
#cmakedefine INCLUDE_vTaskDelete            @INCLUDE_vTaskDelete@
#cmakedefine INCLUDE_vTaskCleanUpResources  @INCLUDE_vTaskCleanUpResources@
#cmakedefine INCLUDE_vTaskSuspend           @INCLUDE_vTaskSuspend@
#cmakedefine INCLUDE_vTaskDelayUntil        @INCLUDE_vTaskDelayUntil@
#cmakedefine INCLUDE_vTaskDelay             @INCLUDE_vTaskDelay@
#cmakedefine INCLUDE_xTaskGetSchedulerState @INCLUDE_xTaskGetSchedulerState@

#cmakedefine INCLUDE_eTaskGetState             @INCLUDE_eTaskGetState@
#cmakedefine INCLUDE_xTaskGetCurrentTaskHandle @INCLUDE_xTaskGetCurrentTaskHandle@
#cmakedefine INCLUDE_xTaskGetHandle            @INCLUDE_xTaskGetHandle@

// #cmakedefine INCLUDE_xTaskGetIdleTaskHandle       @INCLUDE_xTaskGetIdleTaskHandle@
// #cmakedefine INCLUDE_xTaskAbortDelay              @INCLUDE_xTaskAbortDelay@
// #cmakedefine INCLUDE_xQueueGetMutexHolder         @INCLUDE_xQueueGetMutexHolder@
// #cmakedefine INCLUDE_xSemaphoreGetMutexHolder     @INCLUDE_xSemaphoreGetMutexHolder@
// #cmakedefine INCLUDE_uxTaskGetStackHighWaterMark  @INCLUDE_uxTaskGetStackHighWaterMark@
// #cmakedefine INCLUDE_uxTaskGetStackHighWaterMark2 @INCLUDE_uxTaskGetStackHighWaterMark2@
// #cmakedefine INCLUDE_xTaskResumeFromISR           @INCLUDE_xTaskResumeFromISR@
// #cmakedefine INCLUDE_xTimerPendFunctionCall       @INCLUDE_xTimerPendFunctionCall@


/* heap implementation used by the application */
#cmakedefine configUSE_FreeRTOS_HEAP @configUSE_FreeRTOS_HEAP@

/******************************************************************************/
/* Cortex-M specific definitions. */
#ifdef __NVIC_PRIO_BITS
 /* __BVIC_PRIO_BITS will be specified when CMSIS is being used. */
 #define configPRIO_BITS         __NVIC_PRIO_BITS
#else
 #define configPRIO_BITS         4        /* 15 priority levels */
#endif

/* The lowest interrupt priority that can be used in a call to a "set priority"
function. */
#cmakedefine configLIBRARY_LOWEST_INTERRUPT_PRIORITY   @configLIBRARY_LOWEST_INTERRUPT_PRIORITY@

/* The highest interrupt priority that can be used by any interrupt service
routine that makes calls to interrupt safe FreeRTOS API functions.  DO NOT CALL
INTERRUPT SAFE FREERTOS API FUNCTIONS FROM ANY INTERRUPT THAT HAS A HIGHER
PRIORITY THAN THIS! (higher priorities are lower numeric values. */
#cmakedefine configLIBRARY_MAX_SYSCALL_INTERRUPT_PRIORITY @configLIBRARY_MAX_SYSCALL_INTERRUPT_PRIORITY@

/* Interrupt priorities used by the kernel port layer itself.  These are generic
to all Cortex-M ports, and do not rely on any particular library functions. */
#define configKERNEL_INTERRUPT_PRIORITY   ( configLIBRARY_LOWEST_INTERRUPT_PRIORITY << (8 - configPRIO_BITS) )

/* !!!! configMAX_SYSCALL_INTERRUPT_PRIORITY must not be set to zero !!!!
See http://www.FreeRTOS.org/RTOS-Cortex-M3-M4.html. */
#define configMAX_SYSCALL_INTERRUPT_PRIORITY  ( configLIBRARY_MAX_SYSCALL_INTERRUPT_PRIORITY << (8 - configPRIO_BITS) )

// A newlib reent structure will be allocated for each created task. 
#cmakedefine configUSE_NEWLIB_REENTRANT @configUSE_NEWLIB_REENTRANT@

/******************************************************************************/

/* Normal assert() semantics without relying on the provision of an assert.h
header file. */
@configASSERT@
#ifndef configASSERT
    #define configASSERT( x ) if( ( x ) == 0 ) { taskDISABLE_INTERRUPTS(); for( ;; ); }
    //#include <assert.h>
    //#define configASSERT( x ) if( ( x ) == 0 ) { taskDISABLE_INTERRUPTS(); assert(x); }
#endif
/******************************************************************************/

/* Definitions that map the FreeRTOS port interrupt handlers */
#cmakedefine vPortSVCHandler     @vPortSVCHandler@
#cmakedefine xPortPendSVHandler  @xPortPendSVHandler@
#cmakedefine xPortSysTickHandler @xPortSysTickHandler@


#cmakedefine configUSE_APPLICATION_TASK_TAG            @configUSE_APPLICATION_TASK_TAG@
#cmakedefine configUSE_RECURSIVE_MUTEXES               @configUSE_RECURSIVE_MUTEXES@
#cmakedefine configUSE_ALTERNATIVE_API                 @configUSE_ALTERNATIVE_API@
#cmakedefine configUSE_QUEUE_SETS                      @configUSE_QUEUE_SETS@
#cmakedefine configUSE_STATS_FORMATTING_FUNCTIONS      @configUSE_STATS_FORMATTING_FUNCTIONS@
#cmakedefine configUSE_POSIX_ERRNO                     @configUSE_POSIX_ERRNO@
#cmakedefine configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES @configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES@

#cmakedefine configENABLE_FPU                          @configENABLE_FPU@
#cmakedefine configENABLE_MPU                          @configENABLE_MPU@
#cmakedefine configENABLE_TRUSTZONE                    @configENABLE_TRUSTZONE@
#cmakedefine configRUN_FREERTOS_SECURE_ONLY            @configRUN_FREERTOS_SECURE_ONLY@

#cmakedefine configIDLE_SHOULD_YIELD                   @configIDLE_SHOULD_YIELD@
#cmakedefine configNUM_THREAD_LOCAL_STORAGE_POINTERS   @configNUM_THREAD_LOCAL_STORAGE_POINTERS@
#cmakedefine configAPPLICATION_ALLOCATED_HEAP          @configAPPLICATION_ALLOCATED_HEAP@
#cmakedefine configSTACK_DEPTH_TYPE                    @configSTACK_DEPTH_TYPE@
#cmakedefine configINITIAL_TICK_COUNT                  @configINITIAL_TICK_COUNT@
#cmakedefine configMESSAGE_BUFFER_LENGTH_TYPE          @configMESSAGE_BUFFER_LENGTH_TYPE@

#cmakedefine configPRECONDITION() @configPRECONDITION@
// Define "configPRINTF" (optional) 
@configPRINTF@
#cmakedefine configMAX() @configMAX@
#cmakedefine configMIN() @configMIN@
#cmakedefine configEXPECTED_IDLE_TIME_BEFORE_SLEEP()         @configEXPECTED_IDLE_TIME_BEFORE_SLEEP@
#cmakedefine configPRE_SUPPRESS_TICKS_AND_SLEEP_PROCESSING() @configPRE_SUPPRESS_TICKS_AND_SLEEP_PROCESSING@
#cmakedefine configPRE_SLEEP_PROCESSING()                    @configPRE_SLEEP_PROCESSING@
#cmakedefine configPOST_SLEEP_PROCESSING()                   @configPOST_SLEEP_PROCESSING@
#cmakedefine configINCLUDE_APPLICATION_DEFINED_PRIVILEGED_FUNCTIONS() @configINCLUDE_APPLICATION_DEFINED_PRIVILEGED_FUNCTIONS@
#cmakedefine mtCOVERAGE_TEST_MARKER() @mtCOVERAGE_TEST_MARKER@
#cmakedefine mtCOVERAGE_TEST_DELAY() @mtCOVERAGE_TEST_DELAY@


#endif /* __FREERTOS_CONFIG_CONF_H */
