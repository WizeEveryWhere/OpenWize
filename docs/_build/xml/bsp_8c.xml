<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.8.17">
  <compounddef id="bsp_8c" kind="file" language="C++">
    <compoundname>bsp.c</compoundname>
    <includes refid="bsp_8h" local="yes">bsp.h</includes>
    <includes refid="platform_8h" local="yes">platform.h</includes>
    <includes local="no">stdint.h</includes>
    <includes local="no">stm32l4xx_hal.h</includes>
    <incdepgraph>
      <node id="6">
        <label>stdbool.h</label>
      </node>
      <node id="9">
        <label>assert.h</label>
      </node>
      <node id="7">
        <label>stdint.h</label>
      </node>
      <node id="4">
        <label>common.h</label>
        <link refid="common_8h"/>
        <childnode refid="5" relation="include">
        </childnode>
        <childnode refid="6" relation="include">
        </childnode>
        <childnode refid="7" relation="include">
        </childnode>
        <childnode refid="8" relation="include">
        </childnode>
        <childnode refid="9" relation="include">
        </childnode>
        <childnode refid="10" relation="include">
        </childnode>
        <childnode refid="11" relation="include">
        </childnode>
      </node>
      <node id="19">
        <label>stm32l4xx_hal.h</label>
      </node>
      <node id="15">
        <label>bsp_gpio_it.h</label>
        <link refid="bsp__gpio__it_8h"/>
        <childnode refid="4" relation="include">
        </childnode>
        <childnode refid="14" relation="include">
        </childnode>
      </node>
      <node id="13">
        <label>bsp_rtc.h</label>
        <link refid="bsp__rtc_8h"/>
        <childnode refid="4" relation="include">
        </childnode>
      </node>
      <node id="8">
        <label>stddef.h</label>
      </node>
      <node id="12">
        <label>bsp_flash.h</label>
        <link refid="bsp__flash_8h"/>
        <childnode refid="4" relation="include">
        </childnode>
      </node>
      <node id="14">
        <label>bsp_gpio.h</label>
        <link refid="bsp__gpio_8h"/>
        <childnode refid="4" relation="include">
        </childnode>
      </node>
      <node id="16">
        <label>bsp_uart.h</label>
        <link refid="bsp__uart_8h"/>
        <childnode refid="4" relation="include">
        </childnode>
      </node>
      <node id="1">
        <label>/home/nono/OpenWize/demo/Nucleo-L476/bsp/src/bsp.c</label>
        <link refid="bsp_8c"/>
        <childnode refid="2" relation="include">
        </childnode>
        <childnode refid="18" relation="include">
        </childnode>
        <childnode refid="7" relation="include">
        </childnode>
        <childnode refid="19" relation="include">
        </childnode>
      </node>
      <node id="10">
        <label>time.h</label>
      </node>
      <node id="2">
        <label>bsp.h</label>
        <link refid="bsp_8h"/>
        <childnode refid="3" relation="include">
        </childnode>
        <childnode refid="12" relation="include">
        </childnode>
        <childnode refid="13" relation="include">
        </childnode>
        <childnode refid="14" relation="include">
        </childnode>
        <childnode refid="15" relation="include">
        </childnode>
        <childnode refid="16" relation="include">
        </childnode>
        <childnode refid="17" relation="include">
        </childnode>
      </node>
      <node id="18">
        <label>platform.h</label>
        <link refid="platform_8h"/>
      </node>
      <node id="17">
        <label>bsp_lp.h</label>
        <link refid="bsp__lp_8h"/>
        <childnode refid="4" relation="include">
        </childnode>
      </node>
      <node id="5">
        <label>stdio.h</label>
      </node>
      <node id="11">
        <label>machine/endian.h</label>
      </node>
      <node id="3">
        <label>bsp_boot.h</label>
        <link refid="bsp__boot_8h"/>
        <childnode refid="4" relation="include">
        </childnode>
      </node>
    </incdepgraph>
      <sectiondef kind="var">
      <memberdef kind="variable" id="group__common_1ga0dcbbb0847c8786e08430afbda8c6f68" prot="public" static="no" mutable="no">
        <type><ref refid="unionboot__state__t" kindref="compound">boot_state_t</ref></type>
        <definition>boot_state_t gBootState</definition>
        <argsstring></argsstring>
        <name>gBootState</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/nono/OpenWize/demo/Nucleo-L476/bsp/src/bsp.c" line="146" column="14" bodyfile="/home/nono/OpenWize/demo/Nucleo-L476/bsp/src/bsp.c" bodystart="146" bodyend="-1"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="func">
      <memberdef kind="function" id="group__common_1gaec10efdbac1c7466daf49de48b13cbf0" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>uint8_t</type>
        <definition>uint8_t ascii2hex</definition>
        <argsstring>(uint16_t u16Char)</argsstring>
        <name>ascii2hex</name>
        <param>
          <type>uint16_t</type>
          <declname>u16Char</declname>
        </param>
        <briefdescription>
<para>Function convert a hexa represented as 2 bytes char into hexa value (1 byte). </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="in">u16Char</parametername>
</parameternamelist>
<parameterdescription>
<para>Two byte char to convert</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>converted one byte hex value </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/nono/OpenWize/demo/Nucleo-L476/bsp/src/bsp.c" line="55" column="9" bodyfile="/home/nono/OpenWize/demo/Nucleo-L476/bsp/src/bsp.c" bodystart="55" bodyend="69" declfile="/home/nono/OpenWize/demo/Nucleo-L476/bsp/include/bsp.h" declline="53" declcolumn="16"/>
      </memberdef>
      <memberdef kind="function" id="group__common_1ga33020db34346d04a6a7ac64c0fdd7f0e" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>uint16_t</type>
        <definition>uint16_t hex2ascii</definition>
        <argsstring>(uint8_t u8Hex)</argsstring>
        <name>hex2ascii</name>
        <param>
          <type>uint8_t</type>
          <declname>u8Hex</declname>
        </param>
        <briefdescription>
<para>Function convert a hexa value (1 byte) into its 2 bytes char representation. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="in">u8Hex</parametername>
</parameternamelist>
<parameterdescription>
<para>One byte hexa value to convert</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>converted two bytes char representation </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/nono/OpenWize/demo/Nucleo-L476/bsp/src/bsp.c" line="78" column="10" bodyfile="/home/nono/OpenWize/demo/Nucleo-L476/bsp/src/bsp.c" bodystart="78" bodyend="92" declfile="/home/nono/OpenWize/demo/Nucleo-L476/bsp/include/bsp.h" declline="54" declcolumn="17"/>
      </memberdef>
      <memberdef kind="function" id="group__common_1gadfc63b674e9e335fd191663ad1784ee0" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void msleep</definition>
        <argsstring>(uint32_t milisecond)</argsstring>
        <name>msleep</name>
        <param>
          <type>uint32_t</type>
          <declname>milisecond</declname>
        </param>
        <briefdescription>
<para>Alias for HAL_Delay function. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="in">milisecond</parametername>
</parameternamelist>
<parameterdescription>
<para>Number of milisecond to wait </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/nono/OpenWize/demo/Nucleo-L476/bsp/src/bsp.c" line="103" column="6" bodyfile="/home/nono/OpenWize/demo/Nucleo-L476/bsp/src/bsp.c" bodystart="103" bodyend="103" declfile="/home/nono/OpenWize/demo/Nucleo-L476/bsp/include/bsp.h" declline="55" declcolumn="13"/>
      </memberdef>
      <memberdef kind="function" id="group__common_1ga903e37e356fc981619694cc2ab3d8388" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void BSP_Init</definition>
        <argsstring>(uint32_t u32BootState)</argsstring>
        <name>BSP_Init</name>
        <param>
          <type>uint32_t</type>
          <declname>u32BootState</declname>
        </param>
        <briefdescription>
<para>This function initialize the bsp. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="in">u32BootState</parametername>
</parameternamelist>
<parameterdescription>
<para>The current boot state</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>None </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/nono/OpenWize/demo/Nucleo-L476/bsp/src/bsp.c" line="155" column="6" bodyfile="/home/nono/OpenWize/demo/Nucleo-L476/bsp/src/bsp.c" bodystart="155" bodyend="175" declfile="/home/nono/OpenWize/demo/Nucleo-L476/bsp/include/bsp.h" declline="57" declcolumn="13"/>
      </memberdef>
      </sectiondef>
    <briefdescription>
<para>This file contains functions to initialize the BSP. </para>
    </briefdescription>
    <detaileddescription>
<para><simplesect kind="copyright"><para>2019, GRDF, Inc. All rights reserved.</para>
</simplesect>
Redistribution and use in source and binary forms, with or without modification, are permitted (subject to the limitations in the disclaimer below) provided that the following conditions are met:<itemizedlist>
<listitem><para>Redistributions of source code must retain the above copyright notice, this list of conditions and the following disclaimer.</para>
</listitem><listitem><para>Redistributions in binary form must reproduce the above copyright notice, this list of conditions and the following disclaimer in the documentation and/or other materials provided with the distribution.</para>
</listitem><listitem><para>Neither the name of GRDF, Inc. nor the names of its contributors may be used to endorse or promote products derived from this software without specific prior written permission.</para>
</listitem></itemizedlist>
</para>
<para><simplesect kind="par"><title>Revision history</title><para></para>
</simplesect>
<simplesect kind="par"><title>1.0.0 : 2021/09/09 [GBI]</title><para>Initial version </para>
</simplesect>
</para>
    </detaileddescription>
    <programlisting>
<codeline lineno="1"></codeline>
<codeline lineno="36"><highlight class="preprocessor">#ifdef<sp/>__cplusplus</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="37"><highlight class="normal"></highlight><highlight class="keyword">extern</highlight><highlight class="normal"><sp/></highlight><highlight class="stringliteral">&quot;C&quot;</highlight><highlight class="normal"><sp/>{</highlight></codeline>
<codeline lineno="38"><highlight class="normal"></highlight><highlight class="preprocessor">#endif</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="39"><highlight class="normal"></highlight></codeline>
<codeline lineno="40"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&quot;<ref refid="bsp_8h" kindref="compound">bsp.h</ref>&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="41"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&quot;<ref refid="platform_8h" kindref="compound">platform.h</ref>&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="42"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;stdint.h&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="43"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;stm32l4xx_hal.h&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="44"><highlight class="normal"></highlight></codeline>
<codeline lineno="45"><highlight class="normal"></highlight><highlight class="comment">/******************************************************************************/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="46"><highlight class="normal"></highlight><highlight class="comment">/*<sp/>Usefull<sp/><sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="47"><highlight class="normal"></highlight><highlight class="comment">/******************************************************************************/</highlight></codeline>
<codeline lineno="55" refid="group__common_1gaec10efdbac1c7466daf49de48b13cbf0" refkind="member"><highlight class="normal">uint8_t<sp/><ref refid="group__common_1gaec10efdbac1c7466daf49de48b13cbf0" kindref="member">ascii2hex</ref>(uint16_t<sp/>u16Char)</highlight></codeline>
<codeline lineno="56"><highlight class="normal">{</highlight></codeline>
<codeline lineno="57"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">register</highlight><highlight class="normal"><sp/>uint8_t<sp/>t;</highlight></codeline>
<codeline lineno="58"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">register</highlight><highlight class="normal"><sp/>uint8_t<sp/>hex;</highlight></codeline>
<codeline lineno="59"><highlight class="normal"></highlight></codeline>
<codeline lineno="60"><highlight class="normal"><sp/><sp/><sp/><sp/>t<sp/>=<sp/>(uint8_t)(u16Char<sp/>&gt;&gt;<sp/>8);</highlight></codeline>
<codeline lineno="61"><highlight class="normal"><sp/><sp/><sp/><sp/>t<sp/>-=<sp/>(t<sp/>&gt;<sp/>57)?(55):(48);</highlight></codeline>
<codeline lineno="62"><highlight class="normal"><sp/><sp/><sp/><sp/>hex<sp/>=<sp/>t<sp/>&lt;&lt;<sp/>4;</highlight></codeline>
<codeline lineno="63"><highlight class="normal"></highlight></codeline>
<codeline lineno="64"><highlight class="normal"><sp/><sp/><sp/><sp/>t<sp/>=<sp/>(uint8_t)(u16Char<sp/>&amp;<sp/>0xFF);</highlight></codeline>
<codeline lineno="65"><highlight class="normal"><sp/><sp/><sp/><sp/>t<sp/>-=<sp/>(t<sp/>&gt;<sp/>57)?(55):(48);</highlight></codeline>
<codeline lineno="66"><highlight class="normal"><sp/><sp/><sp/><sp/>hex<sp/>|=<sp/>t<sp/>&amp;<sp/>0xF;</highlight></codeline>
<codeline lineno="67"><highlight class="normal"></highlight></codeline>
<codeline lineno="68"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>hex;</highlight></codeline>
<codeline lineno="69"><highlight class="normal">}</highlight></codeline>
<codeline lineno="70"><highlight class="normal"></highlight></codeline>
<codeline lineno="78" refid="group__common_1ga33020db34346d04a6a7ac64c0fdd7f0e" refkind="member"><highlight class="normal">uint16_t<sp/><ref refid="group__common_1ga33020db34346d04a6a7ac64c0fdd7f0e" kindref="member">hex2ascii</ref>(uint8_t<sp/>u8Hex)</highlight></codeline>
<codeline lineno="79"><highlight class="normal">{</highlight></codeline>
<codeline lineno="80"><highlight class="normal"><sp/><sp/><sp/><sp/>uint8_t<sp/>t;</highlight></codeline>
<codeline lineno="81"><highlight class="normal"><sp/><sp/><sp/><sp/>uint16_t<sp/>c;</highlight></codeline>
<codeline lineno="82"><highlight class="normal"></highlight></codeline>
<codeline lineno="83"><highlight class="normal"><sp/><sp/><sp/><sp/>t<sp/>=<sp/>((u8Hex<sp/>&gt;&gt;<sp/>4)<sp/>&amp;<sp/>0xF);</highlight></codeline>
<codeline lineno="84"><highlight class="normal"><sp/><sp/><sp/><sp/>t<sp/>+=<sp/>(t<sp/>&gt;<sp/>9)?(55):(48);</highlight></codeline>
<codeline lineno="85"><highlight class="normal"><sp/><sp/><sp/><sp/>c<sp/>=<sp/>t<sp/>&lt;&lt;<sp/>8;</highlight></codeline>
<codeline lineno="86"><highlight class="normal"></highlight></codeline>
<codeline lineno="87"><highlight class="normal"><sp/><sp/><sp/><sp/>t<sp/>=<sp/>(u8Hex<sp/>&amp;<sp/>0xF);</highlight></codeline>
<codeline lineno="88"><highlight class="normal"><sp/><sp/><sp/><sp/>t<sp/>+=<sp/>(t<sp/>&gt;<sp/>9)?(55):(48);</highlight></codeline>
<codeline lineno="89"><highlight class="normal"><sp/><sp/><sp/><sp/>c<sp/>|=<sp/>t;</highlight></codeline>
<codeline lineno="90"><highlight class="normal"></highlight></codeline>
<codeline lineno="91"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>c;</highlight></codeline>
<codeline lineno="92"><highlight class="normal">}</highlight></codeline>
<codeline lineno="93"><highlight class="normal"></highlight></codeline>
<codeline lineno="94"><highlight class="normal"></highlight><highlight class="comment">/******************************************************************************/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="95"><highlight class="normal"></highlight><highlight class="comment">/*<sp/>Alias<sp/>for<sp/>HAL<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="96"><highlight class="normal"></highlight><highlight class="comment">/******************************************************************************/</highlight></codeline>
<codeline lineno="102"><highlight class="comment">//inline<sp/>__attribute__((always_inline))</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="103" refid="group__common_1gadfc63b674e9e335fd191663ad1784ee0" refkind="member"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="group__common_1gadfc63b674e9e335fd191663ad1784ee0" kindref="member">msleep</ref>(uint32_t<sp/>milisecond)<sp/>{<sp/>HAL_Delay(milisecond);<sp/>}</highlight></codeline>
<codeline lineno="104"><highlight class="normal"></highlight></codeline>
<codeline lineno="105"><highlight class="normal"></highlight><highlight class="comment">/******************************************************************************/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="106"><highlight class="normal"></highlight><highlight class="comment">/*<sp/>Libc<sp/>print<sp/>wrapper<sp/>functions<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="107"><highlight class="normal"></highlight><highlight class="comment">/******************************************************************************/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="108"><highlight class="normal"></highlight></codeline>
<codeline lineno="111"><highlight class="keyword">extern</highlight><highlight class="normal"><sp/><ref refid="structuart__dev__t" kindref="compound">uart_dev_t</ref><sp/>aDevUart[UART_ID_MAX];</highlight></codeline>
<codeline lineno="112"><highlight class="normal"></highlight></codeline>
<codeline lineno="113"><highlight class="normal"></highlight><highlight class="preprocessor">#ifdef<sp/>USE_SEMIHOSTING</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="114"><highlight class="normal"></highlight><highlight class="preprocessor">#warning<sp/>SEMIHOSTING<sp/>is<sp/>defined.<sp/>1)<sp/>You<sp/>should<sp/>exclude<sp/>&quot;syscalls.c&quot;<sp/>from<sp/>build.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="115"><highlight class="normal"></highlight><highlight class="preprocessor">#warning<sp/>SEMIHOSTING<sp/>is<sp/>defined.<sp/>2)<sp/>Add<sp/>&quot;rdimon&quot;<sp/>in<sp/>link.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="116"><highlight class="normal"></highlight><highlight class="preprocessor">#warning<sp/>SEMIHOSTING<sp/>is<sp/>defined.<sp/>2)<sp/>Add<sp/>&quot;-specs=rdimon.specs&quot;<sp/>to<sp/>compiler<sp/>CFLAGS</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="117"><highlight class="normal"></highlight><highlight class="preprocessor">#warning<sp/>SEMIHOSTING<sp/>is<sp/>defined.<sp/>3)<sp/>For<sp/>debugging<sp/>:<sp/>Select<sp/>OpenOCD</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="118"><highlight class="normal"></highlight><highlight class="preprocessor">#warning<sp/>SEMIHOSTING<sp/>is<sp/>defined.<sp/>3)<sp/>For<sp/>debugging<sp/>:<sp/>add<sp/>&quot;monitor<sp/>arm<sp/>semihosting<sp/>enable&quot;<sp/>into<sp/>&quot;Startup&quot;,<sp/>&quot;Initalization<sp/>Commands&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="119"><highlight class="normal"></highlight></codeline>
<codeline lineno="120"><highlight class="normal"></highlight><highlight class="keyword">extern</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>initialise_monitor_handles(</highlight><highlight class="keywordtype">void</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="121"><highlight class="normal"></highlight><highlight class="preprocessor">#else</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="122"><highlight class="normal"></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>__io_putchar(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>ch){</highlight></codeline>
<codeline lineno="123"><highlight class="normal"><sp/><sp/><sp/><sp/>uint16_t<sp/>nb<sp/>=<sp/>1;</highlight></codeline>
<codeline lineno="124"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>((uint8_t)ch<sp/>==<sp/></highlight><highlight class="charliteral">&apos;\n&apos;</highlight><highlight class="normal">){</highlight></codeline>
<codeline lineno="125"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>nb<sp/>=<sp/>2;</highlight></codeline>
<codeline lineno="126"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>((uint8_t<sp/>*)&amp;ch)[1]<sp/>=<sp/></highlight><highlight class="charliteral">&apos;\r&apos;</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="127"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="128"><highlight class="normal"><sp/><sp/><sp/><sp/>HAL_UART_Transmit(aDevUart[STDOUT_UART_ID].hHandle,<sp/>(uint8_t<sp/>*)&amp;ch,<sp/>nb,<sp/>CONSOLE_TX_TIMEOUT);</highlight></codeline>
<codeline lineno="129"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>ch;</highlight></codeline>
<codeline lineno="130"><highlight class="normal">}</highlight></codeline>
<codeline lineno="131"><highlight class="normal"></highlight></codeline>
<codeline lineno="132"><highlight class="normal"></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>__io_getchar(</highlight><highlight class="keywordtype">void</highlight><highlight class="normal">){</highlight></codeline>
<codeline lineno="133"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>c;</highlight></codeline>
<codeline lineno="134"><highlight class="normal"><sp/><sp/><sp/><sp/>HAL_UART_Receive(aDevUart[STDOUT_UART_ID].hHandle,<sp/>(uint8_t*)&amp;c,<sp/>1,<sp/>CONSOLE_RX_TIMEOUT);</highlight></codeline>
<codeline lineno="135"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>c;</highlight></codeline>
<codeline lineno="136"><highlight class="normal">}</highlight></codeline>
<codeline lineno="137"><highlight class="normal"></highlight><highlight class="preprocessor">#endif</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="138"><highlight class="normal"></highlight></codeline>
<codeline lineno="139"><highlight class="normal"></highlight><highlight class="keyword">extern</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>__init_exception_handlers__(</highlight><highlight class="keywordtype">void</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="140"><highlight class="normal"></highlight><highlight class="keyword">extern</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>__init_sys_handlers__(</highlight><highlight class="keywordtype">void</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="141"><highlight class="normal"></highlight><highlight class="keyword">extern</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>__init_sys_calls__(</highlight><highlight class="keywordtype">void</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="142"><highlight class="normal"></highlight></codeline>
<codeline lineno="146"><highlight class="normal"><ref refid="unionboot__state__t" kindref="compound">boot_state_t</ref><sp/>gBootState;</highlight></codeline>
<codeline lineno="147"><highlight class="normal"></highlight></codeline>
<codeline lineno="155" refid="group__common_1ga903e37e356fc981619694cc2ab3d8388" refkind="member"><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="group__common_1ga903e37e356fc981619694cc2ab3d8388" kindref="member">BSP_Init</ref>(uint32_t<sp/>u32BootState)</highlight></codeline>
<codeline lineno="156"><highlight class="normal">{</highlight></codeline>
<codeline lineno="157"><highlight class="normal"></highlight></codeline>
<codeline lineno="158"><highlight class="normal"><sp/><sp/><sp/><sp/>__init_exception_handlers__();</highlight></codeline>
<codeline lineno="159"><highlight class="normal"><sp/><sp/><sp/><sp/>__init_sys_handlers__();</highlight></codeline>
<codeline lineno="160"><highlight class="normal"><sp/><sp/><sp/><sp/>__init_sys_calls__();</highlight></codeline>
<codeline lineno="161"><highlight class="normal"></highlight></codeline>
<codeline lineno="162"><highlight class="normal"><sp/><sp/><sp/><sp/>gBootState.<ref refid="unionboot__state__t_1ad18b41c3bd6a8f66f7904858cb3b3e07" kindref="member">state</ref><sp/>=<sp/>u32BootState;</highlight></codeline>
<codeline lineno="163"><highlight class="normal"></highlight></codeline>
<codeline lineno="164"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Setup<sp/>the<sp/>RTC</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="165"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//BSP_Rtc_Setup(255,<sp/>127);</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="166"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="group__rtc_1ga09bcac38c2d28b6a7d5826d64f8ee3bd" kindref="member">BSP_Rtc_Setup</ref>(RTC_PREDIV_S,<sp/>RTC_PREDIV_A);</highlight></codeline>
<codeline lineno="167"><highlight class="normal"></highlight></codeline>
<codeline lineno="168"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Check<sp/>if<sp/>required<sp/>to<sp/>init<sp/>calendar</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="169"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(<sp/>gBootState.<ref refid="unionboot__state__t_1ad18b41c3bd6a8f66f7904858cb3b3e07" kindref="member">state</ref><sp/>&amp;<sp/>CALENDAR_UNINIT_MSK<sp/>)</highlight></codeline>
<codeline lineno="170"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="171"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//BSP_Rtc_Time_Write((time_t)EPOCH_UNIX_TO_OURS);</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="172"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="group__rtc_1ga0600d5f526280d68aa124253fc6645f4" kindref="member">BSP_Rtc_Time_Write</ref>((time_t)(1356998400U));</highlight></codeline>
<codeline lineno="173"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>gBootState.<ref refid="unionboot__state__t_1ad18b41c3bd6a8f66f7904858cb3b3e07" kindref="member">state</ref><sp/>&amp;=<sp/>~(CALENDAR_UNINIT_MSK);</highlight></codeline>
<codeline lineno="174"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="175"><highlight class="normal">}</highlight></codeline>
<codeline lineno="176"><highlight class="normal"></highlight><highlight class="preprocessor">#ifdef<sp/>__cplusplus</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="177"><highlight class="normal">}</highlight></codeline>
<codeline lineno="178"><highlight class="normal"></highlight><highlight class="preprocessor">#endif</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="179"><highlight class="normal"></highlight></codeline>
    </programlisting>
    <location file="/home/nono/OpenWize/demo/Nucleo-L476/bsp/src/bsp.c"/>
  </compounddef>
</doxygen>
