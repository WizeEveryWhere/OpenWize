<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.8.17">
  <compounddef id="rs_8c" kind="file" language="C++">
    <compoundname>rs.c</compoundname>
    <includes local="no">stdlib.h</includes>
    <includes local="no">stdio.h</includes>
    <includes local="no">string.h</includes>
    <includes local="no">stdint.h</includes>
    <includes refid="rs_8h" local="yes">rs.h</includes>
    <incdepgraph>
      <node id="5">
        <label>stdint.h</label>
      </node>
      <node id="2">
        <label>stdlib.h</label>
      </node>
      <node id="1">
        <label>/home/nono/OpenWize/sources/Samples/ReedSolomon/src/rs.c</label>
        <link refid="rs_8c"/>
        <childnode refid="2" relation="include">
        </childnode>
        <childnode refid="3" relation="include">
        </childnode>
        <childnode refid="4" relation="include">
        </childnode>
        <childnode refid="5" relation="include">
        </childnode>
        <childnode refid="6" relation="include">
        </childnode>
      </node>
      <node id="6">
        <label>rs.h</label>
        <link refid="rs_8h"/>
        <childnode refid="5" relation="include">
        </childnode>
      </node>
      <node id="4">
        <label>string.h</label>
      </node>
      <node id="3">
        <label>stdio.h</label>
      </node>
    </incdepgraph>
      <sectiondef kind="var">
      <memberdef kind="variable" id="group__reed__solomon_1gaa64c09444fd0a103bbf82625f40a3428" prot="public" static="yes" mutable="no">
        <type>const uint8_t</type>
        <definition>const uint8_t pp[mm+1]</definition>
        <argsstring>[mm+1]</argsstring>
        <name>pp</name>
        <initializer>= { 1, 0, 1, 1, 1, 0, 0, 0, 1}</initializer>
        <briefdescription>
<para>This variable hold the irreducible polynomial coefficients (1+x^^2+x^^3+x^^4+x^^8) </para>
        </briefdescription>
        <detaileddescription>
<para><simplesect kind="par"><title></title><para></para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/nono/OpenWize/sources/Samples/ReedSolomon/src/rs.c" line="51" column="22" bodyfile="/home/nono/OpenWize/sources/Samples/ReedSolomon/src/rs.c" bodystart="51" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="group__reed__solomon_1ga1a802b40efd422c7f4df2a1cf7f7c41d" prot="public" static="yes" mutable="no">
        <type>int16_t</type>
        <definition>int16_t index_of[nn+1]</definition>
        <argsstring>[nn+1]</argsstring>
        <name>index_of</name>
        <briefdescription>
<para>This variable hold the index values. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/nono/OpenWize/sources/Samples/ReedSolomon/src/rs.c" line="57" column="16" bodyfile="/home/nono/OpenWize/sources/Samples/ReedSolomon/src/rs.c" bodystart="57" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="group__reed__solomon_1ga01dced4590ee07c9a9fed880e2089ca8" prot="public" static="yes" mutable="no">
        <type>uint8_t</type>
        <definition>uint8_t alpha_to[nn+1]</definition>
        <argsstring>[nn+1]</argsstring>
        <name>alpha_to</name>
        <briefdescription>
<para>This variable hold the alpha values. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/nono/OpenWize/sources/Samples/ReedSolomon/src/rs.c" line="63" column="16" bodyfile="/home/nono/OpenWize/sources/Samples/ReedSolomon/src/rs.c" bodystart="63" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="group__reed__solomon_1gafd9eb24bcce79d3af8aaacf77c24c67d" prot="public" static="yes" mutable="no">
        <type>uint8_t</type>
        <definition>uint8_t gg[nn-kk+1]</definition>
        <argsstring>[nn-kk+1]</argsstring>
        <name>gg</name>
        <briefdescription>
<para>This variable hold the Galois Field values. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/nono/OpenWize/sources/Samples/ReedSolomon/src/rs.c" line="69" column="16" bodyfile="/home/nono/OpenWize/sources/Samples/ReedSolomon/src/rs.c" bodystart="69" bodyend="-1"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="func">
      <memberdef kind="function" id="group__reed__solomon_1ga52436af5b334cb3b2dcb2c213b1ab03c" prot="public" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>static void _generate_gf_</definition>
        <argsstring>(void)</argsstring>
        <name>_generate_gf_</name>
        <param>
          <type>void</type>
        </param>
        <briefdescription>
<para>This private function generate the Galois-Field. </para>
        </briefdescription>
        <detaileddescription>
<para>Generate GF(2**mm) from the irreducible polynomial p(X) in pp[0]..pp[mm] lookup tables:<itemizedlist>
<listitem><para>index-&gt;polynomial form alpha_to[] contains j=alpha**i;</para>
</listitem><listitem><para>polynomial form -&gt; index form index_of[j=alpha**i] = i alpha=2 is the primitive element of GF(2**mm). </para>
</listitem></itemizedlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/nono/OpenWize/sources/Samples/ReedSolomon/src/rs.c" line="146" column="13" bodyfile="/home/nono/OpenWize/sources/Samples/ReedSolomon/src/rs.c" bodystart="146" bodyend="178" declfile="/home/nono/OpenWize/sources/Samples/ReedSolomon/src/rs.c" declline="72" declcolumn="13"/>
      </memberdef>
      <memberdef kind="function" id="group__reed__solomon_1ga1b54c5a9349df28bd5ef0b8ae3a977ce" prot="public" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>static void _gen_poly_</definition>
        <argsstring>(void)</argsstring>
        <name>_gen_poly_</name>
        <param>
          <type>void</type>
        </param>
        <briefdescription>
<para>This private function compute the generator polynomial. </para>
        </briefdescription>
        <detaileddescription>
<para>Obtain the generator polynomial of the tt-error correcting, length nn=(2**mm -1) Reed Solomon code from the product of (X+alpha**i), i=1..2*tt </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/nono/OpenWize/sources/Samples/ReedSolomon/src/rs.c" line="189" column="13" bodyfile="/home/nono/OpenWize/sources/Samples/ReedSolomon/src/rs.c" bodystart="189" bodyend="218" declfile="/home/nono/OpenWize/sources/Samples/ReedSolomon/src/rs.c" declline="73" declcolumn="13"/>
      </memberdef>
      <memberdef kind="function" id="group__reed__solomon_1gad498d44b95fb83a42940926e7284fad5" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>const uint8_t *</type>
        <definition>const uint8_t * RS_GetGG_ptr</definition>
        <argsstring>(uint32_t *u32_ggSz)</argsstring>
        <name>RS_GetGG_ptr</name>
        <param>
          <type>uint32_t *</type>
          <declname>u32_ggSz</declname>
        </param>
        <briefdescription>
<para>This function give the generator polynomial pointer. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="inout">*u32_ggSz</parametername>
</parameternamelist>
<parameterdescription>
<para>This pointer will hold the generator polynomial size.</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>The generator polynomial pointer. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/nono/OpenWize/sources/Samples/ReedSolomon/src/rs.c" line="82" column="15" bodyfile="/home/nono/OpenWize/sources/Samples/ReedSolomon/src/rs.c" bodystart="82" bodyend="86" declfile="/home/nono/OpenWize/sources/Samples/ReedSolomon/include/rs.h" declline="89" declcolumn="15"/>
      </memberdef>
      <memberdef kind="function" id="group__reed__solomon_1ga8cedf8afe3e356d3aec07a8cda6a5908" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>const uint8_t *</type>
        <definition>const uint8_t * RS_GetAlphaOf_ptr</definition>
        <argsstring>(uint32_t *u32_alphaOfSz)</argsstring>
        <name>RS_GetAlphaOf_ptr</name>
        <param>
          <type>uint32_t *</type>
          <declname>u32_alphaOfSz</declname>
        </param>
        <briefdescription>
<para>This function give the alpha_to pointer. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="inout">*u32_alphaOfSz</parametername>
</parameternamelist>
<parameterdescription>
<para>This pointer will hold the alpha_to size.</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>The alpha_to pointer. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/nono/OpenWize/sources/Samples/ReedSolomon/src/rs.c" line="95" column="15" bodyfile="/home/nono/OpenWize/sources/Samples/ReedSolomon/src/rs.c" bodystart="95" bodyend="99" declfile="/home/nono/OpenWize/sources/Samples/ReedSolomon/include/rs.h" declline="90" declcolumn="15"/>
      </memberdef>
      <memberdef kind="function" id="group__reed__solomon_1gacec5c47c378ab4ee48ff4fbc4d9f37da" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>const int16_t *</type>
        <definition>const int16_t * RS_GetIndexOf_ptr</definition>
        <argsstring>(uint32_t *u32_indexOfSz)</argsstring>
        <name>RS_GetIndexOf_ptr</name>
        <param>
          <type>uint32_t *</type>
          <declname>u32_indexOfSz</declname>
        </param>
        <briefdescription>
<para>This function give the index_of pointer. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="inout">*u32_indexOfSz</parametername>
</parameternamelist>
<parameterdescription>
<para>This pointer will hold the index_of size.</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>The index_of pointer. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/nono/OpenWize/sources/Samples/ReedSolomon/src/rs.c" line="108" column="15" bodyfile="/home/nono/OpenWize/sources/Samples/ReedSolomon/src/rs.c" bodystart="108" bodyend="112" declfile="/home/nono/OpenWize/sources/Samples/ReedSolomon/include/rs.h" declline="91" declcolumn="15"/>
      </memberdef>
      <memberdef kind="function" id="group__reed__solomon_1gad86a28fcaf4fa9782dbd18902870f4f8" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>uint32_t</type>
        <definition>uint32_t RS_GetMsgSize</definition>
        <argsstring>(void)</argsstring>
        <name>RS_GetMsgSize</name>
        <param>
          <type>void</type>
        </param>
        <briefdescription>
<para>This function give the message size (in byte). </para>
        </briefdescription>
        <detaileddescription>
<para><simplesect kind="return"><para>The message size. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/nono/OpenWize/sources/Samples/ReedSolomon/src/rs.c" line="119" column="10" bodyfile="/home/nono/OpenWize/sources/Samples/ReedSolomon/src/rs.c" bodystart="119" bodyend="122" declfile="/home/nono/OpenWize/sources/Samples/ReedSolomon/include/rs.h" declline="87" declcolumn="10"/>
        <references refid="group__reed__solomon_1gaeff91e10c1fc668c0df040c3ac54c3bf" compoundref="rs_8h" startline="68">kk</references>
      </memberdef>
      <memberdef kind="function" id="group__reed__solomon_1ga240670a7fcd57564256f540e11ff9ffa" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>uint32_t</type>
        <definition>uint32_t RS_GetParitySize</definition>
        <argsstring>(void)</argsstring>
        <name>RS_GetParitySize</name>
        <param>
          <type>void</type>
        </param>
        <briefdescription>
<para>This function give the parity word size (in byte). </para>
        </briefdescription>
        <detaileddescription>
<para><simplesect kind="return"><para>The parity word size. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/nono/OpenWize/sources/Samples/ReedSolomon/src/rs.c" line="129" column="10" bodyfile="/home/nono/OpenWize/sources/Samples/ReedSolomon/src/rs.c" bodystart="129" bodyend="132" declfile="/home/nono/OpenWize/sources/Samples/ReedSolomon/include/rs.h" declline="88" declcolumn="10"/>
        <references refid="group__reed__solomon_1ga86855f863f0699fce707c88f33920b8b" compoundref="rs_8h" startline="60">tt</references>
      </memberdef>
      <memberdef kind="function" id="group__reed__solomon_1ga2d9ab2dec0d839b6139c372379063cdd" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void RS_Init</definition>
        <argsstring>(void)</argsstring>
        <name>RS_Init</name>
        <param>
          <type>void</type>
        </param>
        <briefdescription>
<para>This function initialize the Galois field and polynomial generator tables. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/nono/OpenWize/sources/Samples/ReedSolomon/src/rs.c" line="225" column="6" bodyfile="/home/nono/OpenWize/sources/Samples/ReedSolomon/src/rs.c" bodystart="225" bodyend="232" declfile="/home/nono/OpenWize/sources/Samples/ReedSolomon/include/rs.h" declline="82" declcolumn="6"/>
      </memberdef>
      <memberdef kind="function" id="group__reed__solomon_1ga9746d223575e88237381e36eb05feb6a" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>uint8_t</type>
        <definition>uint8_t RS_Decode</definition>
        <argsstring>(uint8_t b_recd[RS_MESSAGE_SZ+RS_PARITY_SZ])</argsstring>
        <name>RS_Decode</name>
        <param>
          <type>uint8_t</type>
          <declname>p_Data</declname>
          <defname>b_recd</defname>
          <array>[RS_MESSAGE_SZ+RS_PARITY_SZ]</array>
        </param>
        <briefdescription>
<para>This function detect and correct the given message. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="inout">b_recd</parametername>
</parameternamelist>
<parameterdescription>
<para>Pointer on source and destination data (Message and Parity). b_recd[0 to 222] contains message data, while b_recd[223 to 223 + 32] contains the parity bytes). </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<parameterlist kind="retval"><parameteritem>
<parameternamelist>
<parametername>0</parametername>
</parameternamelist>
<parameterdescription>
<para>Error; </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>1</parametername>
</parameternamelist>
<parameterdescription>
<para>Success </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/nono/OpenWize/sources/Samples/ReedSolomon/src/rs.c" line="244" column="9" bodyfile="/home/nono/OpenWize/sources/Samples/ReedSolomon/src/rs.c" bodystart="244" bodyend="557" declfile="/home/nono/OpenWize/sources/Samples/ReedSolomon/include/rs.h" declline="83" declcolumn="9"/>
        <references refid="group__reed__solomon_1gaa5a72b19b78042bbe9cecd9307882d1b" compoundref="rs_8h" startline="54">nn</references>
        <references refid="group__reed__solomon_1gaeff91e10c1fc668c0df040c3ac54c3bf" compoundref="rs_8h" startline="68">kk</references>
        <references refid="group__reed__solomon_1ga86855f863f0699fce707c88f33920b8b" compoundref="rs_8h" startline="60">tt</references>
      </memberdef>
      <memberdef kind="function" id="group__reed__solomon_1ga53f4615ae90ced8e5df1f737f65ec2b7" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void RS_Encode</definition>
        <argsstring>(uint8_t p_Data[RS_MESSAGE_SZ], uint8_t p_Out[RS_PARITY_SZ])</argsstring>
        <name>RS_Encode</name>
        <param>
          <type>uint8_t</type>
          <declname>p_Data</declname>
          <array>[RS_MESSAGE_SZ]</array>
        </param>
        <param>
          <type>uint8_t</type>
          <declname>p_Out</declname>
          <array>[RS_PARITY_SZ]</array>
        </param>
        <briefdescription>
<para>This function generate the parity word of the given message. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="in">p_Data</parametername>
</parameternamelist>
<parameterdescription>
<para>Pointer on message (source data).</para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="out">p_Out</parametername>
</parameternamelist>
<parameterdescription>
<para>Pointer on parity (destination). </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/nono/OpenWize/sources/Samples/ReedSolomon/src/rs.c" line="567" column="6" bodyfile="/home/nono/OpenWize/sources/Samples/ReedSolomon/src/rs.c" bodystart="567" bodyend="611" declfile="/home/nono/OpenWize/sources/Samples/ReedSolomon/include/rs.h" declline="84" declcolumn="6"/>
        <references refid="group__reed__solomon_1gaa5a72b19b78042bbe9cecd9307882d1b" compoundref="rs_8h" startline="54">nn</references>
        <references refid="group__reed__solomon_1gaeff91e10c1fc668c0df040c3ac54c3bf" compoundref="rs_8h" startline="68">kk</references>
      </memberdef>
      </sectiondef>
    <briefdescription>
<para>This file implement the functions to encode and decode the Reed-Solomon error correction code. </para>
    </briefdescription>
    <detaileddescription>
<para><simplesect kind="copyright"><para>2019, GRDF, Inc. All rights reserved.</para>
</simplesect>
Redistribution and use in source and binary forms, with or without modification, are permitted (subject to the limitations in the disclaimer below) provided that the following conditions are met:<itemizedlist>
<listitem><para>Redistributions of source code must retain the above copyright notice, this list of conditions and the following disclaimer.</para>
</listitem><listitem><para>Redistributions in binary form must reproduce the above copyright notice, this list of conditions and the following disclaimer in the documentation and/or other materials provided with the distribution.</para>
</listitem><listitem><para>Neither the name of GRDF, Inc. nor the names of its contributors may be used to endorse or promote products derived from this software without specific prior written permission.</para>
</listitem></itemizedlist>
</para>
<para><simplesect kind="par"><title>Revision history</title><para></para>
</simplesect>
<simplesect kind="par"><title>1.0.0 : 2020/01/01[SCO]</title><para>Initial version </para>
</simplesect>
</para>
    </detaileddescription>
    <programlisting>
<codeline lineno="1"></codeline>
<codeline lineno="36"><highlight class="preprocessor">#ifdef<sp/>__cplusplus</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="37"><highlight class="normal"></highlight><highlight class="keyword">extern</highlight><highlight class="normal"><sp/></highlight><highlight class="stringliteral">&quot;C&quot;</highlight><highlight class="normal"><sp/>{</highlight></codeline>
<codeline lineno="38"><highlight class="normal"></highlight><highlight class="preprocessor">#endif</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="39"><highlight class="normal"></highlight></codeline>
<codeline lineno="40"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;stdlib.h&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="41"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;stdio.h&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="42"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;string.h&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="43"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;stdint.h&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="44"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&quot;<ref refid="rs_8h" kindref="compound">rs.h</ref>&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="45"><highlight class="normal"></highlight></codeline>
<codeline lineno="51"><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>uint8_t<sp/>pp[<ref refid="group__reed__solomon_1gaf9d5cb2cb2baa77a1467616b3675bd1f" kindref="member">mm</ref>+1]<sp/>=<sp/>{<sp/>1,<sp/>0,<sp/>1,<sp/>1,<sp/>1,<sp/>0,<sp/>0,<sp/>0,<sp/>1};</highlight></codeline>
<codeline lineno="52"><highlight class="normal"></highlight></codeline>
<codeline lineno="57"><highlight class="keyword">static</highlight><highlight class="normal"><sp/>int16_t<sp/>index_of<sp/>[<ref refid="group__reed__solomon_1gaa5a72b19b78042bbe9cecd9307882d1b" kindref="member">nn</ref>+1];</highlight></codeline>
<codeline lineno="58"><highlight class="normal"></highlight></codeline>
<codeline lineno="63"><highlight class="keyword">static</highlight><highlight class="normal"><sp/>uint8_t<sp/>alpha_to<sp/>[<ref refid="group__reed__solomon_1gaa5a72b19b78042bbe9cecd9307882d1b" kindref="member">nn</ref>+1];</highlight></codeline>
<codeline lineno="64"><highlight class="normal"></highlight></codeline>
<codeline lineno="69"><highlight class="keyword">static</highlight><highlight class="normal"><sp/>uint8_t<sp/>gg[<ref refid="group__reed__solomon_1gaa5a72b19b78042bbe9cecd9307882d1b" kindref="member">nn</ref>-<ref refid="group__reed__solomon_1gaeff91e10c1fc668c0df040c3ac54c3bf" kindref="member">kk</ref>+1];</highlight></codeline>
<codeline lineno="70"><highlight class="normal"></highlight></codeline>
<codeline lineno="71"><highlight class="normal"></highlight></codeline>
<codeline lineno="72"><highlight class="normal"></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>_generate_gf_(</highlight><highlight class="keywordtype">void</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="73"><highlight class="normal"></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>_gen_poly_(</highlight><highlight class="keywordtype">void</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="74"><highlight class="normal"></highlight></codeline>
<codeline lineno="82" refid="group__reed__solomon_1gad498d44b95fb83a42940926e7284fad5" refkind="member"><highlight class="keyword">const</highlight><highlight class="normal"><sp/>uint8_t*<sp/><ref refid="group__reed__solomon_1gad498d44b95fb83a42940926e7284fad5" kindref="member">RS_GetGG_ptr</ref>(uint32_t<sp/>*u32_ggSz)</highlight></codeline>
<codeline lineno="83"><highlight class="normal">{</highlight></codeline>
<codeline lineno="84"><highlight class="normal"><sp/><sp/><sp/><sp/>*u32_ggSz<sp/>=<sp/></highlight><highlight class="keyword">sizeof</highlight><highlight class="normal">(gg);</highlight></codeline>
<codeline lineno="85"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>uint8_t*)(&amp;gg[0]);</highlight></codeline>
<codeline lineno="86"><highlight class="normal">}</highlight></codeline>
<codeline lineno="87"><highlight class="normal"></highlight></codeline>
<codeline lineno="95" refid="group__reed__solomon_1ga8cedf8afe3e356d3aec07a8cda6a5908" refkind="member"><highlight class="keyword">const</highlight><highlight class="normal"><sp/>uint8_t*<sp/><ref refid="group__reed__solomon_1ga8cedf8afe3e356d3aec07a8cda6a5908" kindref="member">RS_GetAlphaOf_ptr</ref>(uint32_t<sp/>*u32_alphaOfSz)</highlight></codeline>
<codeline lineno="96"><highlight class="normal">{</highlight></codeline>
<codeline lineno="97"><highlight class="normal"><sp/><sp/><sp/><sp/>*u32_alphaOfSz<sp/>=<sp/>(</highlight><highlight class="keyword">sizeof</highlight><highlight class="normal">(alpha_to)/</highlight><highlight class="keyword">sizeof</highlight><highlight class="normal">(uint8_t));</highlight></codeline>
<codeline lineno="98"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>uint8_t*)(&amp;alpha_to[0]);</highlight></codeline>
<codeline lineno="99"><highlight class="normal">}</highlight></codeline>
<codeline lineno="100"><highlight class="normal"></highlight></codeline>
<codeline lineno="108" refid="group__reed__solomon_1gacec5c47c378ab4ee48ff4fbc4d9f37da" refkind="member"><highlight class="keyword">const</highlight><highlight class="normal"><sp/>int16_t*<sp/><ref refid="group__reed__solomon_1gacec5c47c378ab4ee48ff4fbc4d9f37da" kindref="member">RS_GetIndexOf_ptr</ref>(uint32_t<sp/>*u32_indexOfSz)</highlight></codeline>
<codeline lineno="109"><highlight class="normal">{</highlight></codeline>
<codeline lineno="110"><highlight class="normal"><sp/><sp/><sp/><sp/>*u32_indexOfSz<sp/>=<sp/>(</highlight><highlight class="keyword">sizeof</highlight><highlight class="normal">(index_of)/</highlight><highlight class="keyword">sizeof</highlight><highlight class="normal">(int16_t));</highlight></codeline>
<codeline lineno="111"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>int16_t*)(&amp;index_of[0]);</highlight></codeline>
<codeline lineno="112"><highlight class="normal">}</highlight></codeline>
<codeline lineno="113"><highlight class="normal"></highlight></codeline>
<codeline lineno="119" refid="group__reed__solomon_1gad86a28fcaf4fa9782dbd18902870f4f8" refkind="member"><highlight class="normal">uint32_t<sp/><ref refid="group__reed__solomon_1gad86a28fcaf4fa9782dbd18902870f4f8" kindref="member">RS_GetMsgSize</ref>(</highlight><highlight class="keywordtype">void</highlight><highlight class="normal">)</highlight></codeline>
<codeline lineno="120"><highlight class="normal">{</highlight></codeline>
<codeline lineno="121"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>(uint32_t)<ref refid="group__reed__solomon_1gaeff91e10c1fc668c0df040c3ac54c3bf" kindref="member">kk</ref>;</highlight></codeline>
<codeline lineno="122"><highlight class="normal">}</highlight></codeline>
<codeline lineno="123"><highlight class="normal"></highlight></codeline>
<codeline lineno="129" refid="group__reed__solomon_1ga240670a7fcd57564256f540e11ff9ffa" refkind="member"><highlight class="normal">uint32_t<sp/><ref refid="group__reed__solomon_1ga240670a7fcd57564256f540e11ff9ffa" kindref="member">RS_GetParitySize</ref>(</highlight><highlight class="keywordtype">void</highlight><highlight class="normal">)</highlight></codeline>
<codeline lineno="130"><highlight class="normal">{</highlight></codeline>
<codeline lineno="131"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>(uint32_t)(<ref refid="group__reed__solomon_1ga86855f863f0699fce707c88f33920b8b" kindref="member">tt</ref>*2);</highlight></codeline>
<codeline lineno="132"><highlight class="normal">}</highlight></codeline>
<codeline lineno="133"><highlight class="normal"></highlight></codeline>
<codeline lineno="146"><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>_generate_gf_(</highlight><highlight class="keywordtype">void</highlight><highlight class="normal">)</highlight></codeline>
<codeline lineno="147"><highlight class="normal">{</highlight></codeline>
<codeline lineno="148"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="keyword">register</highlight><highlight class="normal"><sp/>int32_t<sp/>i,<sp/>mask;</highlight></codeline>
<codeline lineno="149"><highlight class="normal"></highlight></codeline>
<codeline lineno="150"><highlight class="normal"><sp/><sp/><sp/>mask<sp/>=<sp/>1;</highlight></codeline>
<codeline lineno="151"><highlight class="normal"><sp/><sp/><sp/>alpha_to[<ref refid="group__reed__solomon_1gaf9d5cb2cb2baa77a1467616b3675bd1f" kindref="member">mm</ref>]<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="152"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(i=0;<sp/>i&lt;<ref refid="group__reed__solomon_1gaf9d5cb2cb2baa77a1467616b3675bd1f" kindref="member">mm</ref>;<sp/>i++)</highlight></codeline>
<codeline lineno="153"><highlight class="normal"><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="154"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>alpha_to[i]<sp/>=<sp/>mask;</highlight></codeline>
<codeline lineno="155"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>index_of[alpha_to[i]]<sp/>=<sp/>i;</highlight></codeline>
<codeline lineno="156"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(pp[i]!=0)</highlight></codeline>
<codeline lineno="157"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="158"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>alpha_to[<ref refid="group__reed__solomon_1gaf9d5cb2cb2baa77a1467616b3675bd1f" kindref="member">mm</ref>]<sp/>^=<sp/>mask;</highlight></codeline>
<codeline lineno="159"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="160"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>mask<sp/>&lt;&lt;=<sp/>1;</highlight></codeline>
<codeline lineno="161"><highlight class="normal"><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="162"><highlight class="normal"></highlight></codeline>
<codeline lineno="163"><highlight class="normal"><sp/><sp/><sp/>index_of[alpha_to[<ref refid="group__reed__solomon_1gaf9d5cb2cb2baa77a1467616b3675bd1f" kindref="member">mm</ref>]]<sp/>=<sp/><ref refid="group__reed__solomon_1gaf9d5cb2cb2baa77a1467616b3675bd1f" kindref="member">mm</ref>;</highlight></codeline>
<codeline lineno="164"><highlight class="normal"><sp/><sp/><sp/>mask<sp/>&gt;&gt;=<sp/>1;</highlight></codeline>
<codeline lineno="165"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(i=<ref refid="group__reed__solomon_1gaf9d5cb2cb2baa77a1467616b3675bd1f" kindref="member">mm</ref>+1;<sp/>i&lt;<ref refid="group__reed__solomon_1gaa5a72b19b78042bbe9cecd9307882d1b" kindref="member">nn</ref>;<sp/>i++)</highlight></codeline>
<codeline lineno="166"><highlight class="normal"><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="167"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(alpha_to[i-1]<sp/>&gt;=<sp/>mask)</highlight></codeline>
<codeline lineno="168"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="169"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>alpha_to[i]<sp/>=<sp/>alpha_to[<ref refid="group__reed__solomon_1gaf9d5cb2cb2baa77a1467616b3675bd1f" kindref="member">mm</ref>]<sp/>^<sp/>((alpha_to[i-1]^mask)&lt;&lt;1);</highlight></codeline>
<codeline lineno="170"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="171"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="172"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="173"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>alpha_to[i]<sp/>=<sp/>alpha_to[i-1]&lt;&lt;1;</highlight></codeline>
<codeline lineno="174"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="175"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>index_of[alpha_to[i]]<sp/>=<sp/>i;</highlight></codeline>
<codeline lineno="176"><highlight class="normal"><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="177"><highlight class="normal"><sp/><sp/><sp/>index_of[0]<sp/>=<sp/>-1;</highlight></codeline>
<codeline lineno="178"><highlight class="normal">}</highlight></codeline>
<codeline lineno="179"><highlight class="normal"></highlight></codeline>
<codeline lineno="189"><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>_gen_poly_(</highlight><highlight class="keywordtype">void</highlight><highlight class="normal">)</highlight></codeline>
<codeline lineno="190"><highlight class="normal">{</highlight></codeline>
<codeline lineno="191"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="keyword">register</highlight><highlight class="normal"><sp/>int32_t<sp/>i,j;</highlight></codeline>
<codeline lineno="192"><highlight class="normal"></highlight></codeline>
<codeline lineno="193"><highlight class="normal"><sp/><sp/><sp/>gg[0]<sp/>=<sp/>2;<sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>primitive<sp/>element<sp/>alpha<sp/>=<sp/>2<sp/><sp/>for<sp/>GF(2**mm)<sp/><sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="194"><highlight class="normal"><sp/><sp/><sp/>gg[1]<sp/>=<sp/>1;<sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>g(x)<sp/>=<sp/>(X+alpha)<sp/>initially<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="195"><highlight class="normal"></highlight></codeline>
<codeline lineno="196"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(i=2;<sp/>i&lt;=<ref refid="group__reed__solomon_1gaa5a72b19b78042bbe9cecd9307882d1b" kindref="member">nn</ref>-<ref refid="group__reed__solomon_1gaeff91e10c1fc668c0df040c3ac54c3bf" kindref="member">kk</ref>;<sp/>i++)</highlight></codeline>
<codeline lineno="197"><highlight class="normal"><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="198"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>gg[i]<sp/>=<sp/>1;</highlight></codeline>
<codeline lineno="199"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(j=i-1;<sp/>j&gt;0;<sp/>j--)</highlight></codeline>
<codeline lineno="200"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="201"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(gg[j]<sp/>!=<sp/>0)</highlight></codeline>
<codeline lineno="202"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="203"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>gg[j]<sp/>=<sp/>gg[j-1]^<sp/>alpha_to[(index_of[gg[j]]+i)%<ref refid="group__reed__solomon_1gaa5a72b19b78042bbe9cecd9307882d1b" kindref="member">nn</ref>];</highlight></codeline>
<codeline lineno="204"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="205"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="206"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="207"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>gg[j]<sp/>=<sp/>gg[j-1];</highlight></codeline>
<codeline lineno="208"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="209"><highlight class="normal"></highlight></codeline>
<codeline lineno="210"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="211"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>gg[0]<sp/>=<sp/>alpha_to[(index_of[gg[0]]+i)%<ref refid="group__reed__solomon_1gaa5a72b19b78042bbe9cecd9307882d1b" kindref="member">nn</ref>];<sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>gg[0]<sp/>can<sp/>never<sp/>be<sp/>zero<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="212"><highlight class="normal"><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="213"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>convert<sp/>gg[]<sp/>to<sp/>index<sp/>form<sp/>for<sp/>quicker<sp/>encoding<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="214"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(i=0;<sp/>i&lt;=<ref refid="group__reed__solomon_1gaa5a72b19b78042bbe9cecd9307882d1b" kindref="member">nn</ref>-<ref refid="group__reed__solomon_1gaeff91e10c1fc668c0df040c3ac54c3bf" kindref="member">kk</ref>;<sp/>i++)</highlight></codeline>
<codeline lineno="215"><highlight class="normal"><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="216"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>gg[i]<sp/>=<sp/>index_of[gg[i]];</highlight></codeline>
<codeline lineno="217"><highlight class="normal"><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="218"><highlight class="normal">}</highlight></codeline>
<codeline lineno="219"><highlight class="normal"></highlight></codeline>
<codeline lineno="225" refid="group__reed__solomon_1ga2d9ab2dec0d839b6139c372379063cdd" refkind="member"><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="group__reed__solomon_1ga2d9ab2dec0d839b6139c372379063cdd" kindref="member">RS_Init</ref>(</highlight><highlight class="keywordtype">void</highlight><highlight class="normal">)</highlight></codeline>
<codeline lineno="226"><highlight class="normal">{</highlight></codeline>
<codeline lineno="227"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>generate<sp/>the<sp/>Galois<sp/>Field<sp/>GF(2**mm)<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="228"><highlight class="normal"><sp/><sp/><sp/><sp/>_generate_gf_();</highlight></codeline>
<codeline lineno="229"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>compute<sp/>the<sp/>generator<sp/>polynomial<sp/>for<sp/>this<sp/>RS<sp/>code<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="230"><highlight class="normal"><sp/><sp/><sp/><sp/>_gen_poly_();</highlight></codeline>
<codeline lineno="231"><highlight class="normal"></highlight></codeline>
<codeline lineno="232"><highlight class="normal">}</highlight></codeline>
<codeline lineno="233"><highlight class="normal"></highlight></codeline>
<codeline lineno="244" refid="group__reed__solomon_1ga9746d223575e88237381e36eb05feb6a" refkind="member"><highlight class="normal">uint8_t<sp/><ref refid="group__reed__solomon_1ga9746d223575e88237381e36eb05feb6a" kindref="member">RS_Decode</ref>(uint8_t<sp/>b_recd<sp/>[<ref refid="group__reed__solomon_1ga7a01fd150b1700236faa5a0abeb927b1" kindref="member">RS_MESSAGE_SZ</ref><sp/>+<sp/><ref refid="group__reed__solomon_1ga9dbba481e4b83f3abc168592ac712c61" kindref="member">RS_PARITY_SZ</ref>])</highlight></codeline>
<codeline lineno="245"><highlight class="normal"></highlight><highlight class="comment">/*<sp/>assume<sp/>we<sp/>have<sp/>received<sp/>bits<sp/>grouped<sp/>into<sp/>mm-bit<sp/>symbols<sp/>in<sp/>recd[i],</highlight></codeline>
<codeline lineno="246"><highlight class="comment"><sp/><sp/><sp/>i=0..(nn-1),<sp/><sp/>and<sp/>recd[i]<sp/>is<sp/>index<sp/>form<sp/>(ie<sp/>as<sp/>powers<sp/>of<sp/>alpha).</highlight></codeline>
<codeline lineno="247"><highlight class="comment"><sp/><sp/><sp/>We<sp/>first<sp/>compute<sp/>the<sp/>2*tt<sp/>syndromes<sp/>by<sp/>substituting<sp/>alpha**i<sp/>into<sp/>rec(X)<sp/>and</highlight></codeline>
<codeline lineno="248"><highlight class="comment"><sp/><sp/><sp/>evaluating,<sp/>storing<sp/>the<sp/>syndromes<sp/>in<sp/>s[i],<sp/>i=1..2tt<sp/>(leave<sp/>s[0]<sp/>zero)<sp/>.</highlight></codeline>
<codeline lineno="249"><highlight class="comment"><sp/><sp/><sp/>Then<sp/>we<sp/>use<sp/>the<sp/>Berlekamp<sp/>iteration<sp/>to<sp/>find<sp/>the<sp/>error<sp/>location<sp/>polynomial</highlight></codeline>
<codeline lineno="250"><highlight class="comment"><sp/><sp/><sp/>elp[i].<sp/><sp/><sp/>If<sp/>the<sp/>degree<sp/>of<sp/>the<sp/>elp<sp/>is<sp/>&gt;tt,<sp/>we<sp/>cannot<sp/>correct<sp/>all<sp/>the<sp/>errors</highlight></codeline>
<codeline lineno="251"><highlight class="comment"><sp/><sp/><sp/>and<sp/>hence<sp/>just<sp/>put<sp/>out<sp/>the<sp/>information<sp/>symbols<sp/>uncorrected.<sp/>If<sp/>the<sp/>degree<sp/>of</highlight></codeline>
<codeline lineno="252"><highlight class="comment"><sp/><sp/><sp/>elp<sp/>is<sp/>&lt;=tt,<sp/>we<sp/>substitute<sp/>alpha**i<sp/>,<sp/>i=1..n<sp/>into<sp/>the<sp/>elp<sp/>to<sp/>get<sp/>the<sp/>roots,</highlight></codeline>
<codeline lineno="253"><highlight class="comment"><sp/><sp/><sp/>hence<sp/>the<sp/>inverse<sp/>roots,<sp/>the<sp/>error<sp/>location<sp/>numbers.<sp/>If<sp/>the<sp/>number<sp/>of<sp/>errors</highlight></codeline>
<codeline lineno="254"><highlight class="comment"><sp/><sp/><sp/>located<sp/>does<sp/>not<sp/>equal<sp/>the<sp/>degree<sp/>of<sp/>the<sp/>elp,<sp/>we<sp/>have<sp/>more<sp/>than<sp/>tt<sp/>errors</highlight></codeline>
<codeline lineno="255"><highlight class="comment"><sp/><sp/><sp/>and<sp/>cannot<sp/>correct<sp/>them.<sp/><sp/>Otherwise,<sp/>we<sp/>then<sp/>solve<sp/>for<sp/>the<sp/>error<sp/>value<sp/>at</highlight></codeline>
<codeline lineno="256"><highlight class="comment"><sp/><sp/><sp/>the<sp/>error<sp/>location<sp/>and<sp/>correct<sp/>the<sp/>error.<sp/><sp/>The<sp/>procedure<sp/>is<sp/>that<sp/>found<sp/>in</highlight></codeline>
<codeline lineno="257"><highlight class="comment"><sp/><sp/><sp/>Lin<sp/>and<sp/>Costello.<sp/>For<sp/>the<sp/>cases<sp/>where<sp/>the<sp/>number<sp/>of<sp/>errors<sp/>is<sp/>known<sp/>to<sp/>be<sp/>too</highlight></codeline>
<codeline lineno="258"><highlight class="comment"><sp/><sp/><sp/>large<sp/>to<sp/>correct,<sp/>the<sp/>information<sp/>symbols<sp/>as<sp/>received<sp/>are<sp/>output<sp/>(the</highlight></codeline>
<codeline lineno="259"><highlight class="comment"><sp/><sp/><sp/>advantage<sp/>of<sp/>systematic<sp/>encoding<sp/>is<sp/>that<sp/>hopefully<sp/>some<sp/>of<sp/>the<sp/>information</highlight></codeline>
<codeline lineno="260"><highlight class="comment"><sp/><sp/><sp/>symbols<sp/>will<sp/>be<sp/>okay<sp/>and<sp/>that<sp/>if<sp/>we<sp/>are<sp/>in<sp/>luck,<sp/>the<sp/>errors<sp/>are<sp/>in<sp/>the</highlight></codeline>
<codeline lineno="261"><highlight class="comment"><sp/><sp/><sp/>parity<sp/>part<sp/>of<sp/>the<sp/>transmitted<sp/>codeword).<sp/><sp/>Of<sp/>course,<sp/>these<sp/>insoluble<sp/>cases</highlight></codeline>
<codeline lineno="262"><highlight class="comment"><sp/><sp/><sp/>can<sp/>be<sp/>returned<sp/>as<sp/>error<sp/>flags<sp/>to<sp/>the<sp/>calling<sp/>routine<sp/>if<sp/>desired.<sp/><sp/><sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="263"><highlight class="normal">{</highlight></codeline>
<codeline lineno="264"><highlight class="normal"><sp/><sp/><sp/><sp/>int16_t<sp/>i,j,u,q;</highlight></codeline>
<codeline lineno="265"><highlight class="normal"><sp/><sp/><sp/><sp/>int16_t<sp/>elp[<ref refid="group__reed__solomon_1gaa5a72b19b78042bbe9cecd9307882d1b" kindref="member">nn</ref>-<ref refid="group__reed__solomon_1gaeff91e10c1fc668c0df040c3ac54c3bf" kindref="member">kk</ref>+2][<ref refid="group__reed__solomon_1gaa5a72b19b78042bbe9cecd9307882d1b" kindref="member">nn</ref>-<ref refid="group__reed__solomon_1gaeff91e10c1fc668c0df040c3ac54c3bf" kindref="member">kk</ref>];</highlight></codeline>
<codeline lineno="266"><highlight class="normal"><sp/><sp/><sp/><sp/>int16_t<sp/>d[<ref refid="group__reed__solomon_1gaa5a72b19b78042bbe9cecd9307882d1b" kindref="member">nn</ref>-<ref refid="group__reed__solomon_1gaeff91e10c1fc668c0df040c3ac54c3bf" kindref="member">kk</ref>+2];</highlight></codeline>
<codeline lineno="267"><highlight class="normal"><sp/><sp/><sp/><sp/>int16_t<sp/>u_lu[<ref refid="group__reed__solomon_1gaa5a72b19b78042bbe9cecd9307882d1b" kindref="member">nn</ref>-<ref refid="group__reed__solomon_1gaeff91e10c1fc668c0df040c3ac54c3bf" kindref="member">kk</ref>+2];</highlight></codeline>
<codeline lineno="268"><highlight class="normal"></highlight></codeline>
<codeline lineno="269"><highlight class="normal"><sp/><sp/><sp/><sp/>int16_t<sp/>recd<sp/>[<ref refid="group__reed__solomon_1gaa5a72b19b78042bbe9cecd9307882d1b" kindref="member">nn</ref>];</highlight></codeline>
<codeline lineno="270"><highlight class="normal"></highlight></codeline>
<codeline lineno="271"><highlight class="normal"><sp/><sp/><sp/><sp/>uint8_t<sp/>err[<ref refid="group__reed__solomon_1gaa5a72b19b78042bbe9cecd9307882d1b" kindref="member">nn</ref>];</highlight></codeline>
<codeline lineno="272"><highlight class="normal"><sp/><sp/><sp/><sp/>uint8_t<sp/>l[<ref refid="group__reed__solomon_1gaa5a72b19b78042bbe9cecd9307882d1b" kindref="member">nn</ref>-<ref refid="group__reed__solomon_1gaeff91e10c1fc668c0df040c3ac54c3bf" kindref="member">kk</ref>+2];</highlight></codeline>
<codeline lineno="273"><highlight class="normal"><sp/><sp/><sp/><sp/>uint8_t<sp/>s[<ref refid="group__reed__solomon_1gaa5a72b19b78042bbe9cecd9307882d1b" kindref="member">nn</ref>-<ref refid="group__reed__solomon_1gaeff91e10c1fc668c0df040c3ac54c3bf" kindref="member">kk</ref>+1];</highlight></codeline>
<codeline lineno="274"><highlight class="normal"><sp/><sp/><sp/><sp/>uint8_t<sp/>z[<ref refid="group__reed__solomon_1ga86855f863f0699fce707c88f33920b8b" kindref="member">tt</ref>+1];</highlight></codeline>
<codeline lineno="275"><highlight class="normal"><sp/><sp/><sp/><sp/>uint8_t<sp/>reg[<ref refid="group__reed__solomon_1ga86855f863f0699fce707c88f33920b8b" kindref="member">tt</ref>+1];</highlight></codeline>
<codeline lineno="276"><highlight class="normal"><sp/><sp/><sp/><sp/>uint8_t<sp/>root[<ref refid="group__reed__solomon_1ga86855f863f0699fce707c88f33920b8b" kindref="member">tt</ref>];</highlight></codeline>
<codeline lineno="277"><highlight class="normal"><sp/><sp/><sp/><sp/>uint8_t<sp/>loc[<ref refid="group__reed__solomon_1ga86855f863f0699fce707c88f33920b8b" kindref="member">tt</ref>];</highlight></codeline>
<codeline lineno="278"><highlight class="normal"></highlight></codeline>
<codeline lineno="279"><highlight class="normal"><sp/><sp/><sp/><sp/>uint8_t<sp/>count=0;</highlight></codeline>
<codeline lineno="280"><highlight class="normal"><sp/><sp/><sp/><sp/>uint8_t<sp/>syn_error=0;</highlight></codeline>
<codeline lineno="281"><highlight class="normal"><sp/><sp/><sp/><sp/>uint8_t<sp/>ret<sp/>=<sp/>1;</highlight></codeline>
<codeline lineno="282"><highlight class="normal"></highlight></codeline>
<codeline lineno="283"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>put<sp/>a_recd[i]<sp/>into<sp/>index<sp/>form<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="284"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(i=0;<sp/>i&lt;<ref refid="group__reed__solomon_1gaa5a72b19b78042bbe9cecd9307882d1b" kindref="member">nn</ref>;<sp/>i++){</highlight></codeline>
<codeline lineno="285"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>recd[i]<sp/>=<sp/>index_of[b_recd[i]];</highlight></codeline>
<codeline lineno="286"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="287"><highlight class="normal"></highlight></codeline>
<codeline lineno="288"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>first<sp/>form<sp/>the<sp/>syndromes<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="289"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(i=1;<sp/>i&lt;=<ref refid="group__reed__solomon_1gaa5a72b19b78042bbe9cecd9307882d1b" kindref="member">nn</ref>-<ref refid="group__reed__solomon_1gaeff91e10c1fc668c0df040c3ac54c3bf" kindref="member">kk</ref>;<sp/>i++)</highlight></codeline>
<codeline lineno="290"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="291"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>s[i]<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="292"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(j=0;<sp/>j&lt;<ref refid="group__reed__solomon_1gaa5a72b19b78042bbe9cecd9307882d1b" kindref="member">nn</ref>;<sp/>j++)</highlight></codeline>
<codeline lineno="293"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="294"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(recd[j]!=-1)<sp/></highlight><highlight class="comment">/*<sp/>recd[j]<sp/>in<sp/>index<sp/>form<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="295"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="296"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>s[i]<sp/>^=<sp/>alpha_to[(recd[j]+i*j)%<ref refid="group__reed__solomon_1gaa5a72b19b78042bbe9cecd9307882d1b" kindref="member">nn</ref>];</highlight></codeline>
<codeline lineno="297"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="298"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="299"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>convert<sp/>syndrome<sp/>from<sp/>polynomial<sp/>form<sp/>to<sp/>index<sp/>form<sp/><sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="300"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(s[i]!=0)</highlight></codeline>
<codeline lineno="301"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="302"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>syn_error=1;</highlight><highlight class="comment">/*<sp/>set<sp/>flag<sp/>if<sp/>non-zero<sp/>syndrome<sp/>=&gt;<sp/>error<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="303"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="304"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>s[i]<sp/>=<sp/>index_of[s[i]];</highlight></codeline>
<codeline lineno="305"><highlight class="normal"><sp/><sp/><sp/><sp/>};</highlight></codeline>
<codeline lineno="306"><highlight class="normal"></highlight></codeline>
<codeline lineno="307"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(syn_error)<sp/></highlight><highlight class="comment">/*<sp/>if<sp/>errors,<sp/>try<sp/>and<sp/>correct<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="308"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="309"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>compute<sp/>the<sp/>error<sp/>location<sp/>polynomial<sp/>via<sp/>the<sp/>Berlekamp<sp/>iterative<sp/>algorithm,</highlight></codeline>
<codeline lineno="310"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/>following<sp/>the<sp/>terminology<sp/>of<sp/>Lin<sp/>and<sp/>Costello<sp/>:<sp/><sp/><sp/>d[u]<sp/>is<sp/>the<sp/>&apos;mu&apos;th</highlight></codeline>
<codeline lineno="311"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/>discrepancy,<sp/>where<sp/>u=&apos;mu&apos;+1<sp/>and<sp/>&apos;mu&apos;<sp/>(the<sp/>Greek<sp/>letter!)<sp/>is<sp/>the<sp/>step<sp/>number</highlight></codeline>
<codeline lineno="312"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/>ranging<sp/>from<sp/>-1<sp/>to<sp/>2*tt<sp/>(see<sp/>L&amp;C),<sp/><sp/>l[u]<sp/>is<sp/>the</highlight></codeline>
<codeline lineno="313"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/>degree<sp/>of<sp/>the<sp/>elp<sp/>at<sp/>that<sp/>step,<sp/>and<sp/>u_l[u]<sp/>is<sp/>the<sp/>difference<sp/>between<sp/>the</highlight></codeline>
<codeline lineno="314"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/>step<sp/>number<sp/>and<sp/>the<sp/>degree<sp/>of<sp/>the<sp/>elp.</highlight></codeline>
<codeline lineno="315"><highlight class="comment"><sp/><sp/><sp/><sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="316"><highlight class="normal"></highlight></codeline>
<codeline lineno="317"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>initialise<sp/>table<sp/>entries<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="318"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>d[0]<sp/>=<sp/>0;<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>index<sp/>form<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="319"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>d[1]<sp/>=<sp/>s[1];<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>index<sp/>form<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="320"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>elp[0][0]<sp/>=<sp/>0;<sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>index<sp/>form<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="321"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>elp[1][0]<sp/>=<sp/>1;<sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>polynomial<sp/>form<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="322"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(i=1;<sp/>i&lt;<ref refid="group__reed__solomon_1gaa5a72b19b78042bbe9cecd9307882d1b" kindref="member">nn</ref>-<ref refid="group__reed__solomon_1gaeff91e10c1fc668c0df040c3ac54c3bf" kindref="member">kk</ref>;<sp/>i++)</highlight></codeline>
<codeline lineno="323"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="324"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>elp[0][i]<sp/>=<sp/>-1;<sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>index<sp/>form<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="325"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>elp[1][i]<sp/>=<sp/>0;<sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>polynomial<sp/>form<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="326"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="327"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>l[0]<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="328"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>l[1]<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="329"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>u_lu[0]<sp/>=<sp/>-1;</highlight></codeline>
<codeline lineno="330"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>u_lu[1]<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="331"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>u<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="332"><highlight class="normal"></highlight></codeline>
<codeline lineno="333"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">do</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="334"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="335"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>u++;</highlight></codeline>
<codeline lineno="336"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(d[u]==-1)</highlight></codeline>
<codeline lineno="337"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="338"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>l[u+1]<sp/>=<sp/>l[u];</highlight></codeline>
<codeline lineno="339"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(i=0;<sp/>i&lt;=l[u];<sp/>i++)</highlight></codeline>
<codeline lineno="340"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="341"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>elp[u+1][i]<sp/>=<sp/>elp[u][i];</highlight></codeline>
<codeline lineno="342"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>elp[u][i]<sp/>=<sp/>index_of[elp[u][i]];</highlight></codeline>
<codeline lineno="343"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="344"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="345"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/></highlight><highlight class="comment">/*<sp/>search<sp/>for<sp/>words<sp/>with<sp/>greatest<sp/>u_lu[q]<sp/>for<sp/>which<sp/>d[q]!=0<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="346"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="347"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>q<sp/>=<sp/>u-1;</highlight></codeline>
<codeline lineno="348"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">while</highlight><highlight class="normal"><sp/>((d[q]==-1)<sp/>&amp;&amp;<sp/>(q&gt;0))<sp/>{<sp/>q--;}</highlight></codeline>
<codeline lineno="349"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>have<sp/>found<sp/>first<sp/>non-zero<sp/>d[q]<sp/><sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="350"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(q&gt;0)</highlight></codeline>
<codeline lineno="351"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="352"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>j=q;</highlight></codeline>
<codeline lineno="353"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">do</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="354"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="355"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>j--;</highlight></codeline>
<codeline lineno="356"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>((d[j]!=-1)<sp/>&amp;&amp;<sp/>(u_lu[q]&lt;u_lu[j]))<sp/>{<sp/>q<sp/>=<sp/>j;<sp/>}</highlight></codeline>
<codeline lineno="357"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight><highlight class="keywordflow">while</highlight><highlight class="normal"><sp/>(j&gt;0);</highlight></codeline>
<codeline lineno="358"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>};</highlight></codeline>
<codeline lineno="359"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>have<sp/>now<sp/>found<sp/>q<sp/>such<sp/>that<sp/>d[u]!=0<sp/>and<sp/>u_lu[q]<sp/>is<sp/>maximum<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="360"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>store<sp/>degree<sp/>of<sp/>new<sp/>elp<sp/>polynomial<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="361"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(l[u]&gt;l[q]+u-q)<sp/>{<sp/>l[u+1]<sp/>=<sp/>l[u];<sp/>}</highlight></codeline>
<codeline lineno="362"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/>{<sp/>l[u+1]<sp/>=<sp/>l[q]+u-q;<sp/>}</highlight></codeline>
<codeline lineno="363"><highlight class="normal"></highlight></codeline>
<codeline lineno="364"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>form<sp/>new<sp/>elp(x)<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="365"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(i=0;<sp/>i&lt;<ref refid="group__reed__solomon_1gaa5a72b19b78042bbe9cecd9307882d1b" kindref="member">nn</ref>-<ref refid="group__reed__solomon_1gaeff91e10c1fc668c0df040c3ac54c3bf" kindref="member">kk</ref>;<sp/>i++)<sp/><sp/>{<sp/><sp/>elp[u+1][i]<sp/>=<sp/>0;<sp/>}</highlight></codeline>
<codeline lineno="366"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(i=0;<sp/>i&lt;=l[q];<sp/>i++)</highlight></codeline>
<codeline lineno="367"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="368"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(elp[q][i]!=-1)</highlight></codeline>
<codeline lineno="369"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="370"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>elp[u+1][i+u-q]<sp/>=<sp/>alpha_to[(d[u]+<ref refid="group__reed__solomon_1gaa5a72b19b78042bbe9cecd9307882d1b" kindref="member">nn</ref>-d[q]+elp[q][i])%<ref refid="group__reed__solomon_1gaa5a72b19b78042bbe9cecd9307882d1b" kindref="member">nn</ref>];</highlight></codeline>
<codeline lineno="371"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="372"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="373"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(i=0;<sp/>i&lt;=l[u];<sp/>i++)</highlight></codeline>
<codeline lineno="374"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="375"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>elp[u+1][i]<sp/>^=<sp/>elp[u][i];</highlight></codeline>
<codeline lineno="376"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>elp[u][i]<sp/>=<sp/>index_of[elp[u][i]];<sp/><sp/></highlight><highlight class="comment">/*convert<sp/>old<sp/>elp<sp/>value<sp/>to<sp/>index*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="377"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="378"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="379"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>u_lu[u+1]<sp/>=<sp/>u-l[u+1];</highlight></codeline>
<codeline lineno="380"><highlight class="normal"></highlight></codeline>
<codeline lineno="381"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>form<sp/>(u+1)th<sp/>discrepancy<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="382"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(u&lt;<ref refid="group__reed__solomon_1gaa5a72b19b78042bbe9cecd9307882d1b" kindref="member">nn</ref>-<ref refid="group__reed__solomon_1gaeff91e10c1fc668c0df040c3ac54c3bf" kindref="member">kk</ref>)<sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>no<sp/>discrepancy<sp/>computed<sp/>on<sp/>last<sp/>iteration<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="383"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="384"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(s[u+1]!=-1)<sp/>{<sp/>d[u+1]<sp/>=<sp/>alpha_to[s[u+1]];<sp/>}</highlight></codeline>
<codeline lineno="385"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/>{<sp/>d[u+1]<sp/>=<sp/>0;<sp/>}</highlight></codeline>
<codeline lineno="386"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(i=1;<sp/>i&lt;=l[u+1];<sp/>i++)</highlight></codeline>
<codeline lineno="387"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="388"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>((s[u+1-i]!=-1)<sp/>&amp;&amp;<sp/>(elp[u+1][i]!=0))</highlight></codeline>
<codeline lineno="389"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="390"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>d[u+1]<sp/>^=<sp/>alpha_to[(s[u+1-i]+index_of[elp[u+1][i]])%<ref refid="group__reed__solomon_1gaa5a72b19b78042bbe9cecd9307882d1b" kindref="member">nn</ref>];</highlight></codeline>
<codeline lineno="391"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="392"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="393"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>d[u+1]<sp/>=<sp/>index_of[d[u+1]];<sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>put<sp/>d[u+1]<sp/>into<sp/>index<sp/>form<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="394"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="395"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}<sp/></highlight><highlight class="keywordflow">while</highlight><highlight class="normal"><sp/>((u&lt;<ref refid="group__reed__solomon_1gaa5a72b19b78042bbe9cecd9307882d1b" kindref="member">nn</ref>-<ref refid="group__reed__solomon_1gaeff91e10c1fc668c0df040c3ac54c3bf" kindref="member">kk</ref>)<sp/>&amp;&amp;<sp/>(l[u+1]&lt;=<ref refid="group__reed__solomon_1ga86855f863f0699fce707c88f33920b8b" kindref="member">tt</ref>));</highlight></codeline>
<codeline lineno="396"><highlight class="normal"></highlight></codeline>
<codeline lineno="397"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>u++;</highlight></codeline>
<codeline lineno="398"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(l[u]&lt;=<ref refid="group__reed__solomon_1ga86855f863f0699fce707c88f33920b8b" kindref="member">tt</ref>)<sp/></highlight><highlight class="comment">/*<sp/>can<sp/>correct<sp/>error<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="399"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="400"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>put<sp/>elp<sp/>into<sp/>index<sp/>form<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="401"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(i=0;<sp/>i&lt;=l[u];<sp/>i++)<sp/>{<sp/><sp/>elp[u][i]<sp/>=<sp/>index_of[elp[u][i]];<sp/>}</highlight></codeline>
<codeline lineno="402"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>find<sp/>roots<sp/>of<sp/>the<sp/>error<sp/>location<sp/>polynomial<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="403"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(i=1;<sp/>i&lt;=l[u];<sp/>i++)</highlight></codeline>
<codeline lineno="404"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="405"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>reg[i]<sp/>=<sp/>elp[u][i];</highlight></codeline>
<codeline lineno="406"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="407"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>count<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="408"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(i=1;<sp/>i&lt;=<ref refid="group__reed__solomon_1gaa5a72b19b78042bbe9cecd9307882d1b" kindref="member">nn</ref>;<sp/>i++)</highlight></codeline>
<codeline lineno="409"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="410"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>q<sp/>=<sp/>1;</highlight></codeline>
<codeline lineno="411"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(j=1;<sp/>j&lt;=l[u];<sp/>j++)</highlight></codeline>
<codeline lineno="412"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="413"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(reg[j]!=-1)</highlight></codeline>
<codeline lineno="414"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="415"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>reg[j]<sp/>=<sp/>(reg[j]+j)%<ref refid="group__reed__solomon_1gaa5a72b19b78042bbe9cecd9307882d1b" kindref="member">nn</ref>;</highlight></codeline>
<codeline lineno="416"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>q<sp/>^=<sp/>alpha_to[reg[j]];</highlight></codeline>
<codeline lineno="417"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>};</highlight></codeline>
<codeline lineno="418"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="419"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(!q)<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>store<sp/>root<sp/>and<sp/>error<sp/>location<sp/>number<sp/>indices<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="420"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="421"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>root[count]<sp/>=<sp/>i;</highlight></codeline>
<codeline lineno="422"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>loc[count]<sp/>=<sp/><ref refid="group__reed__solomon_1gaa5a72b19b78042bbe9cecd9307882d1b" kindref="member">nn</ref>-i;</highlight></codeline>
<codeline lineno="423"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>count++;</highlight></codeline>
<codeline lineno="424"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>};</highlight></codeline>
<codeline lineno="425"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>};</highlight></codeline>
<codeline lineno="426"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(count==l[u])<sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>no.<sp/>roots<sp/>=<sp/>degree<sp/>of<sp/>elp<sp/>hence<sp/>&lt;=<sp/>tt<sp/>errors<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="427"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="428"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>form<sp/>polynomial<sp/>z(x)<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="429"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(i=1;<sp/>i&lt;=l[u];<sp/>i++)<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>Z[0]<sp/>=<sp/>1<sp/>always<sp/>-<sp/>do<sp/>not<sp/>need<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="430"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="431"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>((s[i]!=-1)<sp/>&amp;&amp;<sp/>(elp[u][i]!=-1))</highlight></codeline>
<codeline lineno="432"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="433"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>z[i]<sp/>=<sp/>alpha_to[s[i]]<sp/>^<sp/>alpha_to[elp[u][i]];</highlight></codeline>
<codeline lineno="434"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="435"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="436"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="437"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>((s[i]!=-1)<sp/>&amp;&amp;<sp/>(elp[u][i]==-1))</highlight></codeline>
<codeline lineno="438"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="439"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>z[i]<sp/>=<sp/>alpha_to[s[i]];</highlight></codeline>
<codeline lineno="440"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="441"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="442"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="443"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>((s[i]==-1)<sp/>&amp;&amp;<sp/>(elp[u][i]!=-1))</highlight></codeline>
<codeline lineno="444"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="445"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>z[i]<sp/>=<sp/>alpha_to[elp[u][i]];</highlight></codeline>
<codeline lineno="446"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="447"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="448"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="449"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>z[i]<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="450"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="451"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="452"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="453"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(j=1;<sp/>j&lt;i;<sp/>j++)</highlight></codeline>
<codeline lineno="454"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="455"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>((s[j]!=-1)<sp/>&amp;&amp;<sp/>(elp[u][i-j]!=-1))</highlight></codeline>
<codeline lineno="456"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="457"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>z[i]<sp/>^=<sp/>alpha_to[(elp[u][i-j]<sp/>+<sp/>s[j])%<ref refid="group__reed__solomon_1gaa5a72b19b78042bbe9cecd9307882d1b" kindref="member">nn</ref>];</highlight></codeline>
<codeline lineno="458"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="459"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="460"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>z[i]<sp/>=<sp/>index_of[z[i]];<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>put<sp/>into<sp/>index<sp/>form<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="461"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>};</highlight></codeline>
<codeline lineno="462"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>evaluate<sp/>errors<sp/>at<sp/>locations<sp/>given<sp/>by<sp/>error<sp/>location<sp/>numbers<sp/>loc[i]<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="463"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(i=0;<sp/>i&lt;<ref refid="group__reed__solomon_1gaa5a72b19b78042bbe9cecd9307882d1b" kindref="member">nn</ref>;<sp/>i++)</highlight></codeline>
<codeline lineno="464"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="465"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>err[i]<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="466"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(recd[i]!=-1)<sp/></highlight><highlight class="comment">/*<sp/>convert<sp/>recd[]<sp/>to<sp/>polynomial<sp/>form<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="467"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="468"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>recd[i]<sp/>=<sp/>alpha_to[recd[i]];</highlight></codeline>
<codeline lineno="469"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="470"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="471"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="472"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>recd[i]<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="473"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="474"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="475"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(i=0;<sp/>i&lt;l[u];<sp/>i++)<sp/></highlight><highlight class="comment">/*<sp/>compute<sp/>numerator<sp/>of<sp/>error<sp/>term<sp/>first<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="476"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="477"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>err[loc[i]]<sp/>=<sp/>1;<sp/><sp/></highlight><highlight class="comment">/*<sp/>accounts<sp/>for<sp/>z[0]<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="478"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(j=1;<sp/>j&lt;=l[u];<sp/>j++)</highlight></codeline>
<codeline lineno="479"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="480"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(z[j]!=-1)</highlight></codeline>
<codeline lineno="481"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="482"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>err[loc[i]]<sp/>^=<sp/>alpha_to[(z[j]+j*root[i])%<ref refid="group__reed__solomon_1gaa5a72b19b78042bbe9cecd9307882d1b" kindref="member">nn</ref>];</highlight></codeline>
<codeline lineno="483"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="484"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="485"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(err[loc[i]]!=0)</highlight></codeline>
<codeline lineno="486"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="487"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>err[loc[i]]<sp/>=<sp/>index_of[err[loc[i]]];</highlight></codeline>
<codeline lineno="488"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>q<sp/>=<sp/>0;<sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>form<sp/>denominator<sp/>of<sp/>error<sp/>term<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="489"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(j=0;<sp/>j&lt;l[u];<sp/>j++)</highlight></codeline>
<codeline lineno="490"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="491"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(j!=i)</highlight></codeline>
<codeline lineno="492"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="493"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>q<sp/>+=<sp/>index_of[1^alpha_to[(loc[j]+root[i])%<ref refid="group__reed__solomon_1gaa5a72b19b78042bbe9cecd9307882d1b" kindref="member">nn</ref>]];</highlight></codeline>
<codeline lineno="494"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="495"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="496"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>q<sp/>=<sp/>q<sp/>%<sp/><ref refid="group__reed__solomon_1gaa5a72b19b78042bbe9cecd9307882d1b" kindref="member">nn</ref>;</highlight></codeline>
<codeline lineno="497"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>err[loc[i]]<sp/>=<sp/>alpha_to[(err[loc[i]]-q+<ref refid="group__reed__solomon_1gaa5a72b19b78042bbe9cecd9307882d1b" kindref="member">nn</ref>)%<ref refid="group__reed__solomon_1gaa5a72b19b78042bbe9cecd9307882d1b" kindref="member">nn</ref>];</highlight></codeline>
<codeline lineno="498"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*recd[i]<sp/>must<sp/>be<sp/>in<sp/>polynomial<sp/>form<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="499"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>recd[loc[i]]<sp/>^=<sp/>err[loc[i]];</highlight></codeline>
<codeline lineno="500"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="501"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="502"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="503"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/></highlight><highlight class="comment">/*<sp/>no.<sp/>roots<sp/>!=<sp/>degree<sp/>of<sp/>elp<sp/>=&gt;<sp/>&gt;tt<sp/>errors<sp/>and<sp/>cannot<sp/>solve<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="504"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="505"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(i=0;<sp/>i&lt;<ref refid="group__reed__solomon_1gaa5a72b19b78042bbe9cecd9307882d1b" kindref="member">nn</ref>;<sp/>i++)</highlight></codeline>
<codeline lineno="506"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="507"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>could<sp/>return<sp/>error<sp/>flag<sp/>if<sp/>desired<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="508"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(recd[i]!=-1)</highlight></codeline>
<codeline lineno="509"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="510"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>convert<sp/>recd[]<sp/>to<sp/>polynomial<sp/>form<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="511"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>recd[i]<sp/>=<sp/>alpha_to[recd[i]];</highlight></codeline>
<codeline lineno="512"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="513"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/></highlight><highlight class="comment">/*<sp/>just<sp/>output<sp/>received<sp/>codeword<sp/>as<sp/>is<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="514"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="515"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>recd[i]<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="516"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="517"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="518"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>ret<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="519"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="520"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="521"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/></highlight><highlight class="comment">/*<sp/>elp<sp/>has<sp/>degree<sp/>has<sp/>degree<sp/>&gt;tt<sp/>hence<sp/>cannot<sp/>solve<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="522"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="523"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(i=0;<sp/>i&lt;<ref refid="group__reed__solomon_1gaa5a72b19b78042bbe9cecd9307882d1b" kindref="member">nn</ref>;<sp/>i++)<sp/></highlight><highlight class="comment">/*<sp/>could<sp/>return<sp/>error<sp/>flag<sp/>if<sp/>desired<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="524"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="525"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(recd[i]!=-1)<sp/></highlight><highlight class="comment">/*<sp/>convert<sp/>recd[]<sp/>to<sp/>polynomial<sp/>form<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="526"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="527"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>recd[i]<sp/>=<sp/>alpha_to[recd[i]];</highlight></codeline>
<codeline lineno="528"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="529"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/></highlight><highlight class="comment">/*<sp/>just<sp/>output<sp/>received<sp/>codeword<sp/>as<sp/>is<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="530"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="531"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>recd[i]<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="532"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="533"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="534"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>ret<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="535"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="536"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="537"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/></highlight><highlight class="comment">/*<sp/>no<sp/>non-zero<sp/>syndromes<sp/>=&gt;<sp/>no<sp/>errors:<sp/>output<sp/>received<sp/>codeword<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="538"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="539"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(i=0;<sp/>i&lt;<ref refid="group__reed__solomon_1gaa5a72b19b78042bbe9cecd9307882d1b" kindref="member">nn</ref>;<sp/>i++)</highlight></codeline>
<codeline lineno="540"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="541"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(recd[i]!=-1)<sp/></highlight><highlight class="comment">/*<sp/>convert<sp/>recd[]<sp/>to<sp/>polynomial<sp/>form<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="542"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="543"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>recd[i]<sp/>=<sp/>alpha_to[recd[i]];</highlight></codeline>
<codeline lineno="544"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="545"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="546"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="547"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>recd[i]<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="548"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="549"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="550"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="551"><highlight class="normal"></highlight></codeline>
<codeline lineno="552"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(i<sp/>=<sp/>0;<sp/>i<sp/>&lt;<sp/><ref refid="group__reed__solomon_1gaa5a72b19b78042bbe9cecd9307882d1b" kindref="member">nn</ref>;<sp/>i++)</highlight></codeline>
<codeline lineno="553"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="554"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>b_recd[i]<sp/>=<sp/>(uint8_t)(recd[i]);</highlight></codeline>
<codeline lineno="555"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="556"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>ret;</highlight></codeline>
<codeline lineno="557"><highlight class="normal">}</highlight></codeline>
<codeline lineno="558"><highlight class="normal"></highlight></codeline>
<codeline lineno="567" refid="group__reed__solomon_1ga53f4615ae90ced8e5df1f737f65ec2b7" refkind="member"><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="group__reed__solomon_1ga53f4615ae90ced8e5df1f737f65ec2b7" kindref="member">RS_Encode</ref>(uint8_t<sp/>p_Data[<ref refid="group__reed__solomon_1ga7a01fd150b1700236faa5a0abeb927b1" kindref="member">RS_MESSAGE_SZ</ref>],<sp/>uint8_t<sp/>p_Out[<ref refid="group__reed__solomon_1ga9dbba481e4b83f3abc168592ac712c61" kindref="member">RS_PARITY_SZ</ref>])</highlight></codeline>
<codeline lineno="568"><highlight class="normal"></highlight><highlight class="comment">/*<sp/>take<sp/>the<sp/>string<sp/>of<sp/>symbols<sp/>in<sp/>data[i],<sp/>i=0..(k-1)<sp/>and<sp/>encode<sp/>systematically</highlight></codeline>
<codeline lineno="569"><highlight class="comment"><sp/><sp/><sp/>to<sp/>produce<sp/>2*tt<sp/>parity<sp/>symbols<sp/>in<sp/>output[0]..output[2*tt-1]</highlight></codeline>
<codeline lineno="570"><highlight class="comment"><sp/><sp/><sp/>data[]<sp/>is<sp/>input<sp/>and<sp/>output[]<sp/>is<sp/>output<sp/>in<sp/>polynomial<sp/>form.</highlight></codeline>
<codeline lineno="571"><highlight class="comment"><sp/><sp/><sp/>Encoding<sp/>is<sp/>done<sp/>by<sp/>using<sp/>a<sp/>feedback<sp/>shift<sp/>register<sp/>with<sp/>appropriate</highlight></codeline>
<codeline lineno="572"><highlight class="comment"><sp/><sp/><sp/>connections<sp/>specified<sp/>by<sp/>the<sp/>elements<sp/>of<sp/>gg[],<sp/>which<sp/>was<sp/>generated<sp/>above.</highlight></codeline>
<codeline lineno="573"><highlight class="comment"><sp/><sp/><sp/>Codeword<sp/>is<sp/><sp/><sp/>c(X)<sp/>=<sp/>data(X)*X**(nn-kk)+<sp/>b(X)<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="574"><highlight class="normal">{</highlight></codeline>
<codeline lineno="575"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="keyword">register</highlight><highlight class="normal"><sp/>int32_t<sp/>i,j;</highlight></codeline>
<codeline lineno="576"><highlight class="normal"><sp/><sp/><sp/>int32_t<sp/>feedback;</highlight></codeline>
<codeline lineno="577"><highlight class="normal"></highlight></codeline>
<codeline lineno="578"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(i<sp/>=<sp/>0;<sp/>i<sp/>&lt;<sp/>(<ref refid="group__reed__solomon_1gaa5a72b19b78042bbe9cecd9307882d1b" kindref="member">nn</ref>-<ref refid="group__reed__solomon_1gaeff91e10c1fc668c0df040c3ac54c3bf" kindref="member">kk</ref>);<sp/>i++)</highlight></codeline>
<codeline lineno="579"><highlight class="normal"><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="580"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/>p_Out[i]<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="581"><highlight class="normal"><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="582"><highlight class="normal"></highlight></codeline>
<codeline lineno="583"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(i<sp/>=<sp/>(<ref refid="group__reed__solomon_1gaeff91e10c1fc668c0df040c3ac54c3bf" kindref="member">kk</ref>-1);<sp/>i<sp/>&gt;=<sp/>0;<sp/>i--)</highlight></codeline>
<codeline lineno="584"><highlight class="normal"><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="585"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>feedback<sp/>=<sp/>index_of[<sp/>p_Data[i]^p_Out[<ref refid="group__reed__solomon_1gaa5a72b19b78042bbe9cecd9307882d1b" kindref="member">nn</ref>-<ref refid="group__reed__solomon_1gaeff91e10c1fc668c0df040c3ac54c3bf" kindref="member">kk</ref>-1]<sp/>];</highlight></codeline>
<codeline lineno="586"><highlight class="normal"></highlight></codeline>
<codeline lineno="587"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(feedback<sp/>!=<sp/>-1)</highlight></codeline>
<codeline lineno="588"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="589"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(j<sp/>=<sp/>(<ref refid="group__reed__solomon_1gaa5a72b19b78042bbe9cecd9307882d1b" kindref="member">nn</ref>-<ref refid="group__reed__solomon_1gaeff91e10c1fc668c0df040c3ac54c3bf" kindref="member">kk</ref>-1);<sp/>j<sp/>&gt;<sp/>0;<sp/>j--)</highlight></codeline>
<codeline lineno="590"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="591"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(gg[j]<sp/>!=<sp/>-1)</highlight></codeline>
<codeline lineno="592"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="593"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>p_Out[j]<sp/>=<sp/>p_Out[j-1]^alpha_to[<sp/>(gg[j]+feedback)%<ref refid="group__reed__solomon_1gaa5a72b19b78042bbe9cecd9307882d1b" kindref="member">nn</ref><sp/>];</highlight></codeline>
<codeline lineno="594"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="595"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="596"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="597"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>p_Out[j]<sp/>=<sp/>p_Out[j-1];</highlight></codeline>
<codeline lineno="598"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="599"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="600"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>p_Out[0]<sp/>=<sp/>alpha_to[<sp/>(gg[0]+feedback)%<ref refid="group__reed__solomon_1gaa5a72b19b78042bbe9cecd9307882d1b" kindref="member">nn</ref><sp/>];</highlight></codeline>
<codeline lineno="601"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="602"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="603"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="604"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(j<sp/>=<sp/>(<ref refid="group__reed__solomon_1gaa5a72b19b78042bbe9cecd9307882d1b" kindref="member">nn</ref>-<ref refid="group__reed__solomon_1gaeff91e10c1fc668c0df040c3ac54c3bf" kindref="member">kk</ref>-1);<sp/>j<sp/>&gt;<sp/>0;<sp/>j--)</highlight></codeline>
<codeline lineno="605"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="606"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>p_Out[j]<sp/>=<sp/>p_Out[j-1];</highlight></codeline>
<codeline lineno="607"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="608"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>p_Out[0]<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="609"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="610"><highlight class="normal"><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="611"><highlight class="normal">}</highlight></codeline>
<codeline lineno="612"><highlight class="normal"></highlight></codeline>
<codeline lineno="613"><highlight class="normal"></highlight><highlight class="preprocessor">#ifdef<sp/>__cplusplus</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="614"><highlight class="normal">}</highlight></codeline>
<codeline lineno="615"><highlight class="normal"></highlight><highlight class="preprocessor">#endif</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="616"><highlight class="normal"></highlight></codeline>
    </programlisting>
    <location file="/home/nono/OpenWize/sources/Samples/ReedSolomon/src/rs.c"/>
  </compounddef>
</doxygen>
